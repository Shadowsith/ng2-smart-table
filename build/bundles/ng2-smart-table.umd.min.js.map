{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/ng2-smart-table/src/lib/components/cell/cell.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/edit-cell-default.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/custom-edit.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/default-edit.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-edit-mode/edit-cell.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/default-editor.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/checkbox-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/completer-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/input-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/select-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-editors/textarea-editor.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-view-mode/custom-view.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell-view-mode/view-cell.component.ts","../../../projects/ng2-smart-table/src/lib/components/cell/cell.module.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-default.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/default-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/custom-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/default-filter.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/checkbox-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/completer-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/input-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter-types/select-filter.component.ts","../../../projects/ng2-smart-table/src/lib/components/filter/filter.module.ts","../../../projects/ng2-smart-table/src/lib/components/pager/pager.component.ts","../../../projects/ng2-smart-table/src/lib/components/pager/pager.module.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/tbody.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/cells/create-cancel.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/cells/edit-delete.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/cells/custom.component.ts","../../../projects/ng2-smart-table/src/lib/components/tbody/tbody.module.ts","../../../projects/ng2-smart-table/src/lib/components/thead/thead.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/actions.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/actions-title.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/add-button.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/checkbox-select-all.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/column-title.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/cells/title/title.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/rows/thead-filters-row.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/rows/thead-form-row.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/rows/thead-titles-row.component.ts","../../../projects/ng2-smart-table/src/lib/components/thead/thead.module.ts","../../../projects/ng2-smart-table/src/lib/lib/helpers.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/cell.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/row.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/column.ts","../../../projects/ng2-smart-table/src/lib/lib/data-set/data-set.ts","../../../projects/ng2-smart-table/src/lib/lib/grid.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/data-source.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.sorter.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.filter.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.pager.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/local/local.data-source.ts","../../../projects/ng2-smart-table/src/lib/ng2-smart-table.component.ts","../../../projects/ng2-smart-table/src/lib/ng2-smart-table.module.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/server/server-source.conf.ts","../../../projects/ng2-smart-table/src/lib/lib/data-source/server/server.data-source.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","this","constructor","create","__values","o","s","Symbol","iterator","m","i","length","next","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","CellComponent","inputClass","mode","isInEditing","edited","EventEmitter","onEdited","event","isNew","grid","getNewRow","createConfirm","save","row","editConfirm","Component","args","selector","template","Input","Output","EditCellDefault","onStopEditing","cell","getRow","onClick","stopPropagation","CustomEditComponent","resolver","_this","_super","ngOnChanges","changes","customComponent","componentFactory","resolveComponentFactory","getColumn","editor","component","dynamicTarget","createComponent","instance","subscribe","ngOnDestroy","destroy","ComponentFactoryResolver","ViewChild","read","ViewContainerRef","static","DefaultEditComponent","getEditorType","type","EditCellComponent","CheckboxEditorComponent","onChange","trueVal","getConfig","true","falseVal","false","newValue","target","checked","DefaultEditor","CompleterEditorComponent","completerService","completerStr","ngOnInit","config","completer","dataService","local","data","searchFields","titleField","descriptionField","onEditedCompleter","title","CompleterService","InputEditorComponent","SelectEditorComponent","TextareaEditorComponent","CustomViewComponent","createCustomComponent","callOnComponentInit","patchInstance","renderComponent","onComponentInitFunction","getOnComponentInitFunction","assign","getPatch","getValue","rowData","getData","changeDetection","ChangeDetectionStrategy","OnPush","CELL_COMPONENTS","ViewCellComponent","NgModule","imports","CommonModule","FormsModule","Ng2CompleterModule","declarations","exports","FilterDefault","filter","query","onFilter","source","addFilter","field","column","id","search","getFilterFunction","FilterComponent","apply","firstChange","dataChangedSub","unsubscribe","onChanged","dataChanges","filterConf","getFilter","filters","forEach","k","v","DefaultFilterComponent","CustomFilterComponent","DefaultFilter","delay","changesSubscription","setFilter","emit","CheckboxFilterComponent","filterActive","inputControl","FormControl","valueChanges","pipe","debounceTime","getFilterConfig","resetFilter","preventDefault","setValue","emitEvent","CompleterFilterComponent","completerContent","Subject","map","ev","distinctUntilChanged","inputTextChanged","InputFilterComponent","SelectFilterComponent","skip","NgControl","FILTER_COMPONENTS","ReactiveFormsModule","PagerComponent","perPageSelect","changePage","count","page","getPaging","perPage","currentPerPage","isPageOutOfBounce","setPage","processPageChange","initPages","getLast","shouldShow","paginate","getPage","prev","getPages","pages","Math","ceil","pagesCount","showPagesCount","middleOne","lastOne","floor","onChangePerPage","toLowerCase","refresh","Ng2SmartTableTbodyComponent","cancel","edit","delete","custom","userSelectRow","editRowSelect","multipleSelectRow","rowHover","defineProperty","actionColumns","isActionAdd","isActionEdit","isActionDelete","getColumns","isMultiSelectVisible","showActionColumnLeft","showActionColumn","getSetting","editInputClass","showActionColumnRight","noDataMessage","getVisibleCells","cells","hide","TbodyCreateCancelComponent","onSave","onCancelEdit","cancelData","getCancelData","_b","_c","getId","saveButtonContent","cancelButtonContent","TbodyEditDeleteComponent","onEdit","onDelete","deleteConfirm","editRowButtonContent","deleteRowButtonContent","TbodyCustomComponent","onCustom","action","name","TBODY_COMPONENTS","CellModule","Ng2SmartTableTheadComponent","sort","selectAllRows","createCancel","isHideHeader","isHideSubHeader","ActionsComponent","onCancel","createFormShown","dataSet","newRow","createButtonContent","ActionsTitleComponent","ref","ngAfterViewInit","nativeElement","classList","add","actionsColumnTitle","ElementRef","AddButtonComponent","addNewButtonContent","onAdd","TitleComponent","currentDirection","sortConf","getSort","fieldConf","_sort","changeSortDirection","setSort","direction","compare","getCompareFunction","newDirection","sortDirection","TheadFitlersRowComponent","filterInputClass","getVisibleColumns","columns","TheadFormRowComponent","onCreate","addInputClass","TheadTitlesRowComponent","THEAD_COMPONENTS","CheckboxSelectAllComponent","ColumnTitleComponent","FilterModule","deepExtend","objects","_i","val","src","slice","obj","isArray","keys","key","cloneDeep","Deferred","promise","Promise","resolve","reject","getDeepFromObject","object","defaultValue","split","level","getPageForRowIndex","index","Cell","getValuePrepareFunction","Function","PREPARE","getTitle","isEditable","isAddable","Row","_dataSet","isSelected","process","getCell","find","el","getCells","getIsSelected","getNewData","values","setData","createCell","defValue","settings","Column","class","width","isSortable","isFilterable","defaultSortDirection","compareFunction","valuePrepareFunction","filterFunction","getFilterType","prepareType","indexOf","prepareSortDirection","determineType","DataSet","columnSettings","rows","createColumns","createNewRow","createRows","getRows","getFirstRow","getLastRow","findRowByData","deselectAll","selectedRow","undefined","selectRow","previousIsSelected","selectPreviousRow","selectFirstRow","selectLastRow","selectRowByIndex","rowsLength","willSelectFirstRow","willSelect","willSelectLastRow","select","selectedRowIndex","Grid","onSelectRowSource","onDeselectRowSource","setSettings","setSource","detach","sourceOnChangedSubscription","sourceOnUpdatedSubscription","position","isCurrentActionsPosition","isActionsVisible","getDataSet","prepareSource","processDataChange","onUpdated","onSelectRow","asObservable","onDeselectRow","confirmEmitter","deferred","then","newData","skipAdd","prepend","catch","err","confirm","skipEdit","update","remove","shouldProcessChange","determineRowToSelect","getRowIndexToSelect","shouldSkipSelection","initialSource","getInitialSort","setPaging","getPageToSelect","getSelectedRows","status","getSelectionInfo","switchPageToSelectedRowPage","Number","_a","dataAmount","pageToSelect","max","maxPageAmount","min","DataSource","onChangedSource","onAddedSource","onUpdatedSource","onRemovedSource","emitOnChanged","load","onAdded","onRemoved","element","emitOnAdded","append","emitOnRemoved","emitOnUpdated","empty","conf","doEmit","andOperator","getElements","elements","paging","compareValues","a","LocalSorter","customCompare","dir","filterValues","toString","includes","LocalFilter","customFilter","LocalPager","LocalDataSource","filteredAndSorted","pagingConf","reset","unshift","found","Error","prepareData","getFilteredAndSorted","getAll","silent","currentFieldConf","mergedData_1","elem","pos","arr","Ng2SmartTableComponent","rowSelect","rowDeselect","userRowSelect","pageChange","editCancel","defaultSettings","selectMode","hideHeader","hideSubHeader","actions","columnTitle","editButtonContent","confirmSave","addButtonContent","confirmCreate","deleteButtonContent","confirmDelete","attr","pager","display","rowClassFunction","isAllSelected","destroyed$","prepareSettings","initGrid","tableId","tableClass","isPagerDisplay","isIndexOutOfRange","deselectAllRows","emitDeselectRow","onMultipleSelectRow","onUserSelectRow","emitUserSelectRow","emitSelectRow","onRowHover","onSelectAllRows","$event","subscribeToOnSelectRow","subscribeToOnDeselectRow","resetAllSelector","emitPageChange","selectedRows","selected","onSelectRowSubscription","takeUntil","onDeselectRowSubscription","PagerModule","TBodyModule","THeadModule","ServerSourceConf","endPoint","_d","sortFieldKey","_e","sortDirKey","_f","pagerPageKey","_g","pagerLimitKey","_h","filterFieldKey","_j","totalKey","_k","dataKey","SORT_FIELD_KEY","SORT_DIR_KEY","PAGER_PAGE_KEY","PAGER_LIMIT_KEY","FILTER_FIELD_KEY","TOTAL_KEY","DATA_KEY","ServerDataSource","http","lastRequestCount","requestElements","res","extractTotalFromResponse","extractDataFromResponse","toPromise","rawData","body","headers","has","get","httpParams","createRequesParams","params","observe","HttpParams","addSortRequestParams","addFilterRequestParams","addPagerRequestParams","set","toUpperCase","replace"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, state, kind, f) {\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a getter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot read private member from an object whose class did not declare it\");\r\n    return kind === \"m\" ? f : kind === \"a\" ? f.call(receiver) : f ? f.value : state.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, state, value, kind, f) {\r\n    if (kind === \"m\") throw new TypeError(\"Private method is not writable\");\r\n    if (kind === \"a\" && !f) throw new TypeError(\"Private accessor was defined without a setter\");\r\n    if (typeof state === \"function\" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError(\"Cannot write private member to an object whose class did not declare it\");\r\n    return (kind === \"a\" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;\r\n}\r\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Grid } from '../../lib/grid';\nimport { Cell } from '../../lib/data-set/cell';\nimport { Row } from '../../lib/data-set/row';\n\n@Component({\n  selector: 'ng2-smart-table-cell',\n  template: `\n    <table-cell-view-mode *ngIf=\"!isInEditing\" [cell]=\"cell\"></table-cell-view-mode>\n    <table-cell-edit-mode *ngIf=\"isInEditing\" [cell]=\"cell\"\n                          [inputClass]=\"inputClass\"\n                          (edited)=\"onEdited($event)\">\n    </table-cell-edit-mode>\n  `,\n})\nexport class CellComponent {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() editConfirm: EventEmitter<any>;\n  @Input() createConfirm: EventEmitter<any>;\n  @Input() isNew: boolean;\n  @Input() cell: Cell;\n  @Input() inputClass: string = '';\n  @Input() mode: string = 'inline';\n  @Input() isInEditing: boolean = false;\n\n  @Output() edited = new EventEmitter<any>();\n\n  onEdited(event: any) {\n    if (this.isNew) {\n      this.grid.create(this.grid.getNewRow(), this.createConfirm);\n    } else {\n      this.grid.save(this.row, this.editConfirm);\n    }\n  }\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  template: ''\n})\nexport class EditCellDefault {\n\n  @Input() cell: Cell;\n  @Input() inputClass: string = '';\n\n  @Output() edited = new EventEmitter<any>();\n\n  onEdited(event: any): boolean {\n    this.edited.next(event);\n    return false;\n  }\n\n  onStopEditing(): boolean {\n    this.cell.getRow().isInEditing = false;\n    return false;\n  }\n\n  onClick(event: any) {\n    event.stopPropagation();\n  }\n}\n","import {\n  Component,\n  ComponentFactoryResolver,\n  ViewChild,\n  ViewContainerRef,\n  SimpleChanges,\n  OnChanges,\n  OnDestroy,\n} from '@angular/core';\n\nimport { EditCellDefault } from './edit-cell-default';\n\n@Component({\n  selector: 'table-cell-custom-editor',\n  template: `\n    <ng-template #dynamicTarget></ng-template>\n  `,\n})\nexport class CustomEditComponent extends EditCellDefault implements OnChanges, OnDestroy {\n\n  customComponent: any;\n  @ViewChild('dynamicTarget', { read: ViewContainerRef, static: true }) dynamicTarget: any;\n\n  constructor(private resolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.cell && !this.customComponent) {\n      const componentFactory = this.resolver.resolveComponentFactory(this.cell.getColumn().editor.component);\n      this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n\n      // set @Inputs and @Outputs of custom component\n      this.customComponent.instance.cell = this.cell;\n      this.customComponent.instance.inputClass = this.inputClass;\n      this.customComponent.instance.onStopEditing.subscribe(() => this.onStopEditing());\n      this.customComponent.instance.onEdited.subscribe((event: any) => this.onEdited(event));\n      this.customComponent.instance.onClick.subscribe((event: any) => this.onClick(event));\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.customComponent) {\n      this.customComponent.destroy();\n    }\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { EditCellDefault } from './edit-cell-default';\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: 'table-cell-default-editor',\n  templateUrl: './default-edit.component.html',\n})\nexport class DefaultEditComponent extends EditCellDefault {\n\n  constructor() {\n    super();\n  }\n\n  getEditorType(): string {\n    return this.cell.getColumn().editor && this.cell.getColumn().editor.type;\n  }\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: 'table-cell-edit-mode',\n  template: `\n      <div [ngSwitch]=\"getEditorType()\">\n        <table-cell-custom-editor *ngSwitchCase=\"'custom'\"\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-custom-editor>\n        <table-cell-default-editor *ngSwitchDefault\n                                  [cell]=\"cell\"\n                                  [inputClass]=\"inputClass\"\n                                  (edited)=\"onEdited($event)\">\n        </table-cell-default-editor>\n      </div>\n    `,\n})\nexport class EditCellComponent {\n\n  @Input() cell: Cell;\n  @Input() inputClass: string = '';\n\n  @Output() edited = new EventEmitter<any>();\n\n  onEdited(event: any): boolean {\n    this.edited.next(event);\n    return false;\n  }\n\n  getEditorType(): string {\n    return this.cell.getColumn().editor && this.cell.getColumn().editor.type;\n  }\n}\n","import { Component, Output, EventEmitter, Input } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  template: '',\n})\nexport class DefaultEditor implements Editor {\n  @Input() cell: Cell;\n  @Input() inputClass: string;\n\n  @Output() onStopEditing = new EventEmitter<any>();\n  @Output() onEdited = new EventEmitter<any>();\n  @Output() onClick = new EventEmitter<any>();\n}\n\nexport interface Editor {\n  cell: Cell;\n  inputClass: string;\n  onStopEditing: EventEmitter<any>;\n  onEdited: EventEmitter<any>;\n  onClick: EventEmitter<any>;\n}\n","import { Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'checkbox-editor',\n  styleUrls: ['./editor.component.scss'],\n  template: `\n    <input [ngClass]=\"inputClass\"\n           type=\"checkbox\"\n           class=\"form-control\"\n           [name]=\"cell.getId()\"\n           [disabled]=\"!cell.isEditable()\"\n           [checked]=\"cell.getValue() == (cell.getColumn().getConfig()?.true || true)\"\n           (click)=\"onClick.emit($event)\"\n           (change)=\"onChange($event)\">\n    `,\n})\nexport class CheckboxEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n\n  onChange(event: any) {\n    const trueVal = (this.cell.getColumn().getConfig() && this.cell.getColumn().getConfig().true) || true;\n    const falseVal = (this.cell.getColumn().getConfig() && this.cell.getColumn().getConfig().false) || false;\n    this.cell.newValue = event.target.checked ? trueVal : falseVal;\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { CompleterService } from 'ng2-completer';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'completer-editor',\n  template: `\n    <ng2-completer [(ngModel)]=\"completerStr\"\n                   [dataService]=\"cell.getColumn().getConfig().completer.dataService\"\n                   [minSearchLength]=\"cell.getColumn().getConfig().completer.minSearchLength || 0\"\n                   [pause]=\"cell.getColumn().getConfig().completer.pause || 0\"\n                   [placeholder]=\"cell.getColumn().getConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"onEditedCompleter($event)\">\n    </ng2-completer>\n    `,\n})\nexport class CompleterEditorComponent extends DefaultEditor implements OnInit {\n\n  completerStr: string = '';\n\n  constructor(private completerService: CompleterService) {\n    super();\n  }\n\n  ngOnInit() {\n    if (this.cell.getColumn().editor && this.cell.getColumn().editor.type === 'completer') {\n      const config = this.cell.getColumn().getConfig().completer;\n      config.dataService = this.completerService.local(config.data, config.searchFields, config.titleField);\n      config.dataService.descriptionField(config.descriptionField);\n    }\n  }\n\n  onEditedCompleter(event: { title: '' }): boolean {\n    this.cell.newValue = event.title;\n    return false;\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'input-editor',\n  styleUrls: ['./editor.component.scss'],\n  template: `\n    <input [ngClass]=\"inputClass\"\n           class=\"form-control\"\n           [(ngModel)]=\"cell.newValue\"\n           [name]=\"cell.getId()\"\n           [placeholder]=\"cell.getTitle()\"\n           [disabled]=\"!cell.isEditable()\"\n           (click)=\"onClick.emit($event)\"\n           (keydown.enter)=\"onEdited.emit($event)\"\n           (keydown.esc)=\"onStopEditing.emit()\">\n    `,\n})\nexport class InputEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n}\n","import { AfterViewInit, Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'select-editor',\n  template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            [(ngModel)]=\"cell.newValue\"\n            [name]=\"cell.getId()\"\n            [disabled]=\"!cell.isEditable()\"\n            (click)=\"onClick.emit($event)\"\n            (keydown.enter)=\"onEdited.emit($event)\"\n            (keydown.esc)=\"onStopEditing.emit()\"\n            [multiple]=\"cell.getColumn().getConfig()?.multiple\">\n\n        <option *ngFor=\"let option of cell.getColumn().getConfig()?.list\" [value]=\"option.value\"\n                [selected]=\"option.value === cell.getValue()\">{{ option.title }}\n        </option>\n    </select>\n    `,\n})\nexport class SelectEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n}\n","import { Component } from '@angular/core';\n\nimport { DefaultEditor } from './default-editor';\n\n@Component({\n  selector: 'textarea-editor',\n  styleUrls: ['./editor.component.scss'],\n  template: `\n    <textarea [ngClass]=\"inputClass\"\n              class=\"form-control\"\n              [(ngModel)]=\"cell.newValue\"\n              [name]=\"cell.getId()\"\n              [disabled]=\"!cell.isEditable()\"\n              [placeholder]=\"cell.getTitle()\"\n              (click)=\"onClick.emit($event)\"\n              (keydown.enter)=\"onEdited.emit($event)\"\n              (keydown.esc)=\"onStopEditing.emit()\">\n    </textarea>\n    `,\n})\nexport class TextareaEditorComponent extends DefaultEditor {\n\n  constructor() {\n    super();\n  }\n}\n","import {\n  Component,\n  Input,\n  ComponentFactoryResolver,\n  ViewChild,\n  ViewContainerRef,\n  OnInit,\n  OnDestroy,\n} from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\nimport { ViewCell } from './view-cell';\n\n@Component({\n  selector: 'custom-view-component',\n  template: `\n    <ng-template #dynamicTarget></ng-template>\n  `,\n})\nexport class CustomViewComponent implements OnInit, OnDestroy {\n\n  customComponent: any;\n  @Input() cell: Cell;\n  @ViewChild('dynamicTarget', { read: ViewContainerRef, static: true }) dynamicTarget: any;\n\n  constructor(private resolver: ComponentFactoryResolver) {\n  }\n\n  ngOnInit() {\n    if (this.cell && !this.customComponent) {\n      this.createCustomComponent();\n      this.callOnComponentInit();\n      this.patchInstance();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.customComponent) {\n      this.customComponent.destroy();\n    }\n  }\n\n  protected createCustomComponent() {\n    const componentFactory = this.resolver.resolveComponentFactory(this.cell.getColumn().renderComponent);\n    this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n  }\n\n  protected callOnComponentInit() {\n    const onComponentInitFunction = this.cell.getColumn().getOnComponentInitFunction();\n    onComponentInitFunction && onComponentInitFunction(this.customComponent.instance);\n  }\n\n  protected patchInstance() {\n    Object.assign(this.customComponent.instance, this.getPatch());\n  }\n\n  protected getPatch(): ViewCell {\n    return {\n      value: this.cell.getValue(),\n      rowData: this.cell.getRow().getData()\n    }\n  }\n}\n","import {Component, Input, ChangeDetectionStrategy } from '@angular/core';\n\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: 'table-cell-view-mode',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <div [ngSwitch]=\"cell.getColumn().type\" [ngClass]=\"cell.getColumn().class\">\n        <custom-view-component *ngSwitchCase=\"'custom'\" [cell]=\"cell\"></custom-view-component>\n        <div *ngSwitchCase=\"'html'\" [innerHTML]=\"cell.getValue()\"></div>\n        <div *ngSwitchDefault>{{ cell.getValue() }}</div>\n    </div>\n    `,\n})\nexport class ViewCellComponent {\n\n  @Input() cell: Cell;\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { Ng2CompleterModule } from 'ng2-completer';\n\nimport { CellComponent } from './cell.component';\nimport { CustomEditComponent } from './cell-edit-mode/custom-edit.component';\nimport { DefaultEditComponent } from './cell-edit-mode/default-edit.component';\nimport { EditCellComponent } from './cell-edit-mode/edit-cell.component';\nimport { CheckboxEditorComponent } from './cell-editors/checkbox-editor.component';\nimport { CompleterEditorComponent } from './cell-editors/completer-editor.component';\nimport { InputEditorComponent } from './cell-editors/input-editor.component';\nimport { SelectEditorComponent } from './cell-editors/select-editor.component';\nimport { TextareaEditorComponent } from './cell-editors/textarea-editor.component';\nimport { CustomViewComponent } from './cell-view-mode/custom-view.component';\nimport { ViewCellComponent } from './cell-view-mode/view-cell.component';\nimport { EditCellDefault } from './cell-edit-mode/edit-cell-default';\nimport { DefaultEditor } from './cell-editors/default-editor';\n\nconst CELL_COMPONENTS = [\n  CellComponent,\n  EditCellDefault,\n  DefaultEditor,\n  CustomEditComponent,\n  DefaultEditComponent,\n  EditCellComponent,\n  CheckboxEditorComponent,\n  CompleterEditorComponent,\n  InputEditorComponent,\n  SelectEditorComponent,\n  TextareaEditorComponent,\n  CustomViewComponent,\n  ViewCellComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    Ng2CompleterModule,\n  ],\n  declarations: [\n    ...CELL_COMPONENTS,\n  ],\n  exports: [\n    ...CELL_COMPONENTS,\n  ],\n})\nexport class CellModule { }\n","import { Output, EventEmitter, Input, Component } from '@angular/core';\n\nimport { Column } from '../../lib/data-set/column';\nimport { DataSource } from '../../lib/data-source/data-source';\n\n@Component({\n  template: '',\n})\nexport class FilterDefault {\n\n  @Input() column: Column;\n  @Input() source: DataSource;\n  @Input() inputClass: string = '';\n\n  @Output() filter = new EventEmitter<any>();\n\n  query: string = '';\n\n  onFilter(query: string) {\n    this.source.addFilter({\n      field: this.column.id,\n      search: query,\n      filter: this.column.getFilterFunction(),\n    });\n  }\n}\n","import { Component, OnChanges, SimpleChanges } from '@angular/core';\nimport { FilterDefault } from './filter-default';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'ng2-smart-table-filter',\n  styleUrls: ['./filter.component.scss'],\n  template: `\n      <div class=\"ng2-smart-filter\" *ngIf=\"column.isFilterable\" [ngSwitch]=\"column.getFilterType()\">\n        <custom-table-filter *ngSwitchCase=\"'custom'\"\n                             [query]=\"query\"\n                             [column]=\"column\"\n                             [source]=\"source\"\n                             [inputClass]=\"inputClass\"\n                             (filter)=\"onFilter($event)\">\n        </custom-table-filter>\n        <default-table-filter *ngSwitchDefault\n                              [query]=\"query\"\n                              [column]=\"column\"\n                              [source]=\"source\"\n                              [inputClass]=\"inputClass\"\n                              (filter)=\"onFilter($event)\">\n        </default-table-filter>\n      </div>\n    `,\n})\nexport class FilterComponent extends FilterDefault implements OnChanges {\n  query: string = '';\n  protected dataChangedSub: Subscription;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.source) {\n      if (!changes.source.firstChange) {\n        this.dataChangedSub.unsubscribe();\n      }\n      this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n        const filterConf = this.source.getFilter();\n        if (filterConf && filterConf.filters && filterConf.filters.length === 0) {\n          this.query = '';\n\n          // add a check for existing filters an set the query if one exists for this column\n          // this covers instances where the filter is set by user code while maintaining existing functionality\n        } else if (filterConf && filterConf.filters && filterConf.filters.length > 0) {\n          filterConf.filters.forEach((k: any, v: any) => {\n            if (k.field == this.column.id) {\n              this.query = k.search;\n            }\n          });\n        }\n      });\n    }\n  }\n}\n","import {Component, Input} from '@angular/core';\n\nimport {FilterDefault} from \"./filter-default\";\n\n@Component({\n  selector: 'default-table-filter',\n  template: `\n    <ng-container [ngSwitch]=\"column.getFilterType()\">\n      <select-filter *ngSwitchCase=\"'list'\"\n                     [query]=\"query\"\n                     [ngClass]=\"inputClass\"\n                     [column]=\"column\"\n                     (filter)=\"onFilter($event)\">\n      </select-filter>\n      <checkbox-filter *ngSwitchCase=\"'checkbox'\"\n                       [query]=\"query\"\n                       [ngClass]=\"inputClass\"\n                       [column]=\"column\"\n                       (filter)=\"onFilter($event)\">\n      </checkbox-filter>\n      <completer-filter *ngSwitchCase=\"'completer'\"\n                        [query]=\"query\"\n                        [ngClass]=\"inputClass\"\n                        [column]=\"column\"\n                        (filter)=\"onFilter($event)\">\n      </completer-filter>\n      <input-filter *ngSwitchDefault\n                    [query]=\"query\"\n                    [ngClass]=\"inputClass\"\n                    [column]=\"column\"\n                    (filter)=\"onFilter($event)\">\n      </input-filter>\n    </ng-container>\n  `,\n})\nexport class DefaultFilterComponent extends FilterDefault {\n  @Input() query: string;\n}\n","import {\n  Component,\n  ComponentFactoryResolver, Input,\n  OnChanges,\n  OnDestroy,\n  SimpleChanges,\n  ViewChild,\n  ViewContainerRef\n} from '@angular/core';\n\nimport { FilterDefault } from './filter-default';\n\n@Component({\n  selector: 'custom-table-filter',\n  template: `<ng-template #dynamicTarget></ng-template>`,\n})\nexport class CustomFilterComponent extends FilterDefault implements OnChanges, OnDestroy {\n  @Input() query: string;\n  customComponent: any;\n  @ViewChild('dynamicTarget', { read: ViewContainerRef, static: true }) dynamicTarget: any;\n\n  constructor(private resolver: ComponentFactoryResolver) {\n    super();\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (this.column && !this.customComponent) {\n      const componentFactory = this.resolver.resolveComponentFactory(this.column.filter.component);\n      this.customComponent = this.dynamicTarget.createComponent(componentFactory);\n\n      // set @Inputs and @Outputs of custom component\n      this.customComponent.instance.query = this.query;\n      this.customComponent.instance.column = this.column;\n      this.customComponent.instance.source = this.source;\n      this.customComponent.instance.inputClass = this.inputClass;\n      this.customComponent.instance.filter.subscribe((event: any) => this.onFilter(event));\n    }\n    if (this.customComponent) {\n      this.customComponent.instance.ngOnChanges(changes);\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.customComponent) {\n      this.customComponent.destroy();\n    }\n  }\n}\n","import { Input, Output, EventEmitter, OnDestroy, Component } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { Column } from '../../../lib/data-set/column';\n\n@Component({\n  template: '',\n})\nexport class DefaultFilter implements Filter, OnDestroy {\n\n  delay: number = 300;\n  changesSubscription: Subscription;\n  @Input() query: string;\n  @Input() inputClass: string;\n  @Input() column: Column;\n  @Output() filter = new EventEmitter<string>();\n\n  ngOnDestroy() {\n    if (this.changesSubscription) {\n      this.changesSubscription.unsubscribe();\n    }\n  }\n\n  setFilter() {\n    this.filter.emit(this.query);\n  }\n}\n\nexport interface Filter {\n\n  delay?: number;\n  changesSubscription?: Subscription;\n  query: string;\n  inputClass: string;\n  column: Column;\n  filter: EventEmitter<string>;\n}\n","import { Component, OnInit } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\nimport { DefaultFilter } from './default-filter';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'checkbox-filter',\n  template: `\n    <input type=\"checkbox\" [formControl]=\"inputControl\" [ngClass]=\"inputClass\" class=\"form-control\">\n    <a href=\"#\" *ngIf=\"filterActive\"\n                (click)=\"resetFilter($event)\">{{column.getFilterConfig()?.resetText || 'reset'}}</a>\n  `,\n})\nexport class CheckboxFilterComponent extends DefaultFilter implements OnInit {\n\n  filterActive: boolean = false;\n  inputControl = new FormControl();\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {\n    this.changesSubscription = this.inputControl.valueChanges\n      .pipe(debounceTime(this.delay))\n      .subscribe((checked: boolean) => {\n        this.filterActive = true;\n        const trueVal = (this.column.getFilterConfig() && this.column.getFilterConfig().true) || true;\n        const falseVal = (this.column.getFilterConfig() && this.column.getFilterConfig().false) || false;\n        this.query = checked ? trueVal : falseVal;\n        this.setFilter();\n      });\n  }\n\n  resetFilter(event: any) {\n    event.preventDefault();\n    this.query = '';\n    this.inputControl.setValue(false, { emitEvent: false });\n    this.filterActive = false;\n    this.setFilter();\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { CompleterService } from 'ng2-completer';\n\nimport { DefaultFilter } from './default-filter';\nimport { distinctUntilChanged, debounceTime, map } from 'rxjs/operators';\n\n@Component({\n  selector: 'completer-filter',\n  template: `\n    <ng2-completer [(ngModel)]=\"query\"\n                   (ngModelChange)=\"inputTextChanged($event)\"\n                   [dataService]=\"column.getFilterConfig().completer.dataService\"\n                   [minSearchLength]=\"column.getFilterConfig().completer.minSearchLength || 0\"\n                   [pause]=\"column.getFilterConfig().completer.pause || 0\"\n                   [placeholder]=\"column.getFilterConfig().completer.placeholder || 'Start typing...'\"\n                   (selected)=\"completerContent.next($event)\">\n    </ng2-completer>\n  `,\n})\nexport class CompleterFilterComponent extends DefaultFilter implements OnInit {\n\n  completerContent = new Subject<any>();\n\n  constructor(private completerService: CompleterService) {\n    super();\n  }\n\n  ngOnInit() {\n    const config = this.column.getFilterConfig().completer;\n    config.dataService = this.completerService.local(config.data, config.searchFields, config.titleField);\n    config.dataService.descriptionField(config.descriptionField);\n\n    this.changesSubscription = this.completerContent\n      .pipe(\n        map((ev: any) => (ev && ev.title) || ev || ''),\n        distinctUntilChanged(),\n        debounceTime(this.delay)\n      )\n      .subscribe((search: string) => {\n        this.query = search;\n        this.setFilter();\n      });\n  }\n\n  inputTextChanged(event: string) {\n    // workaround to trigger the search event when the home/end buttons are clicked\n    // when this happens the [(ngModel)]=\"query\" is set to \"\" but the (selected) method is not called\n    // so here it gets called manually\n    if (event === '') {\n      this.completerContent.next(event);\n    }\n  }\n}\n","import { Component, OnChanges, OnInit, SimpleChanges } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { debounceTime, distinctUntilChanged, skip } from 'rxjs/operators';\n\nimport { DefaultFilter } from './default-filter';\n\n@Component({\n  selector: 'input-filter',\n  template: `\n    <input\n      [ngClass]=\"inputClass\"\n      [formControl]=\"inputControl\"\n      class=\"form-control\"\n      type=\"text\"\n      placeholder=\"{{ column.title }}\"/>\n  `,\n})\nexport class InputFilterComponent extends DefaultFilter implements OnInit, OnChanges {\n\n  inputControl = new FormControl();\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {\n    if (this.query) {\n      this.inputControl.setValue(this.query);\n    }\n    this.inputControl.valueChanges\n      .pipe(\n        distinctUntilChanged(),\n        debounceTime(this.delay),\n      )\n      .subscribe((value: string) => {\n        this.query = this.inputControl.value;\n        this.setFilter();\n      });\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.query) {\n      this.inputControl.setValue(this.query);\n    }\n  }\n}\n","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { distinctUntilChanged, debounceTime, skip } from 'rxjs/operators';\n\nimport { DefaultFilter } from './default-filter';\n\n@Component({\n  selector: 'select-filter',\n  template: `\n    <select [ngClass]=\"inputClass\"\n            class=\"form-control\"\n            #inputControl\n            [(ngModel)]=\"query\">\n\n        <option value=\"\">{{ column.getFilterConfig().selectText }}</option>\n        <option *ngFor=\"let option of column.getFilterConfig().list\" [value]=\"option.value\">\n          {{ option.title }}\n        </option>\n    </select>\n  `,\n})\nexport class SelectFilterComponent extends DefaultFilter implements OnInit {\n\n  @ViewChild('inputControl', { read: NgControl, static: true }) inputControl: NgControl;\n\n  constructor() {\n    super();\n  }\n\n  ngOnInit() {\n    this.inputControl.valueChanges\n      .pipe(\n        skip(1),\n        distinctUntilChanged(),\n        debounceTime(this.delay)\n      )\n      .subscribe((value: string) => this.setFilter());\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { Ng2CompleterModule } from 'ng2-completer';\n\nimport { FilterComponent } from './filter.component';\nimport { DefaultFilterComponent } from \"./default-filter.component\";\nimport { CustomFilterComponent } from \"./custom-filter.component\";\nimport { CheckboxFilterComponent } from './filter-types/checkbox-filter.component';\nimport { CompleterFilterComponent } from './filter-types/completer-filter.component';\nimport { InputFilterComponent } from './filter-types/input-filter.component';\nimport { SelectFilterComponent } from './filter-types/select-filter.component';\nimport { DefaultFilter } from './filter-types/default-filter';\nimport { FilterDefault } from './filter-default';\n\nconst FILTER_COMPONENTS = [\n  FilterDefault,\n  DefaultFilter,\n  FilterComponent,\n  DefaultFilterComponent,\n  CustomFilterComponent,\n  CheckboxFilterComponent,\n  CompleterFilterComponent,\n  InputFilterComponent,\n  SelectFilterComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    Ng2CompleterModule,\n  ],\n  declarations: [\n    ...FILTER_COMPONENTS,\n  ],\n  exports: [\n    ...FILTER_COMPONENTS,\n  ],\n})\nexport class FilterModule { }\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DataSource } from '../../lib/data-source/data-source';\n\n@Component({\n  selector: 'ng2-smart-table-pager',\n  styleUrls: ['./pager.component.scss'],\n  template: `\n    <nav *ngIf=\"shouldShow()\" class=\"ng2-smart-pagination-nav\">\n      <ul class=\"ng2-smart-pagination pagination\">\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == 1 ? false : paginate(1)\" aria-label=\"First\">\n            <span aria-hidden=\"true\">&laquo;</span>\n            <span class=\"sr-only\">First</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\" [ngClass]=\"{disabled: getPage() == 1}\">\n          <a class=\"ng2-smart-page-link page-link page-link-prev\" href=\"#\"\n             (click)=\"getPage() == 1 ? false : prev()\" aria-label=\"Prev\">\n            <span aria-hidden=\"true\">&lt;</span>\n            <span class=\"sr-only\">Prev</span>\n          </a>\n        </li>\n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{active: getPage() == page}\" *ngFor=\"let page of getPages()\">\n          <span class=\"ng2-smart-page-link page-link\"\n          *ngIf=\"getPage() == page\">{{ page }} <span class=\"sr-only\">(current)</span></span>\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"paginate(page)\" *ngIf=\"getPage() != page\">{{ page }}</a>\n        </li>\n\n        <li class=\"ng2-smart-page-item page-item\"\n            [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link page-link-next\" href=\"#\"\n             (click)=\"getPage() == getLast() ? false : next()\" aria-label=\"Next\">\n            <span aria-hidden=\"true\">&gt;</span>\n            <span class=\"sr-only\">Next</span>\n          </a>\n        </li>\n        \n        <li class=\"ng2-smart-page-item page-item\"\n        [ngClass]=\"{disabled: getPage() == getLast()}\">\n          <a class=\"ng2-smart-page-link page-link\" href=\"#\"\n          (click)=\"getPage() == getLast() ? false : paginate(getLast())\" aria-label=\"Last\">\n            <span aria-hidden=\"true\">&raquo;</span>\n            <span class=\"sr-only\">Last</span>\n          </a>\n        </li>\n      </ul>\n    </nav>\n    \n    <nav *ngIf=\"perPageSelect && perPageSelect.length > 0\" class=\"ng2-smart-pagination-per-page\">\n      <label for=\"per-page\">\n        Per Page:\n      </label>\n      <select (change)=\"onChangePerPage($event)\" [(ngModel)]=\"currentPerPage\" id=\"per-page\">\n        <option *ngFor=\"let item of perPageSelect\" [value]=\"item\">{{ item }}</option>\n      </select>\n    </nav>\n  `,\n})\nexport class PagerComponent implements OnChanges {\n\n  @Input() source: DataSource;\n  @Input() perPageSelect: any[] = [];\n\n  @Output() changePage = new EventEmitter<any>();\n\n  currentPerPage: any;\n\n  protected pages: Array<any>;\n  protected page: number;\n  protected count: number = 0;\n  protected perPage: number;\n\n  protected dataChangedSub: Subscription;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.source) {\n      if (!changes.source.firstChange) {\n        this.dataChangedSub.unsubscribe();\n      }\n      this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n        this.page = this.source.getPaging().page;\n        this.perPage = this.source.getPaging().perPage;\n        this.currentPerPage = this.perPage;\n        this.count = this.source.count();\n        if (this.isPageOutOfBounce()) {\n          this.source.setPage(--this.page);\n        }\n\n        this.processPageChange(dataChanges);\n        this.initPages();\n      });\n    }\n  }\n\n  /**\n   * We change the page here depending on the action performed against data source\n   * if a new element was added to the end of the table - then change the page to the last\n   * if a new element was added to the beginning of the table - then to the first page\n   * @param changes\n   */\n  processPageChange(changes: any) {\n    if (changes['action'] === 'prepend') {\n      this.source.setPage(1);\n    }\n    if (changes['action'] === 'append') {\n      this.source.setPage(this.getLast());\n    }\n  }\n\n  shouldShow(): boolean {\n    return this.source.count() > this.perPage;\n  }\n\n  paginate(page: number): boolean {\n    this.source.setPage(page);\n    this.page = page;\n    this.changePage.emit({ page });\n    return false;\n  }\n\n  next(): boolean {\n    return this.paginate(this.getPage() + 1);\n  }\n\n  prev(): boolean {\n    return this.paginate(this.getPage() - 1);\n  }\n\n  getPage(): number {\n    return this.page;\n  }\n\n  getPages(): Array<any> {\n    return this.pages;\n  }\n\n  getLast(): number {\n    return Math.ceil(this.count / this.perPage);\n  }\n\n  isPageOutOfBounce(): boolean {\n    return (this.page * this.perPage) >= (this.count + this.perPage) && this.page > 1;\n  }\n\n  initPages() {\n    const pagesCount = this.getLast();\n    let showPagesCount = 4;\n    showPagesCount = pagesCount < showPagesCount ? pagesCount : showPagesCount;\n    this.pages = [];\n\n    if (this.shouldShow()) {\n\n      let middleOne = Math.ceil(showPagesCount / 2);\n      middleOne = this.page >= middleOne ? this.page : middleOne;\n\n      let lastOne = middleOne + Math.floor(showPagesCount / 2);\n      lastOne = lastOne >= pagesCount ? pagesCount : lastOne;\n\n      const firstOne = lastOne - showPagesCount + 1;\n\n      for (let i = firstOne; i <= lastOne; i++) {\n        this.pages.push(i);\n      }\n    }\n  }\n\n  onChangePerPage(event: any) {\n    if (this.currentPerPage) {\n\n      if (typeof this.currentPerPage === 'string' && this.currentPerPage.toLowerCase() === 'all') {\n        this.source.getPaging().perPage = null;\n      } else {\n        this.source.getPaging().perPage = this.currentPerPage * 1;\n        this.source.refresh();\n      }\n      this.initPages();\n    }\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { PagerComponent } from './pager.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n  ],\n  declarations: [\n    PagerComponent,\n  ],\n  exports: [\n    PagerComponent,\n  ],\n})\nexport class PagerModule { }\n","import {Component, Input, Output, EventEmitter, } from '@angular/core';\n\nimport { Grid } from '../../lib/grid';\nimport { DataSource } from '../../lib/data-source/data-source';\nimport { Cell } from '../../lib/data-set/cell';\n\n@Component({\n  selector: '[ng2-st-tbody]',\n  styleUrls: ['./tbody.component.scss'],\n  templateUrl: './tbody.component.html',\n})\nexport class Ng2SmartTableTbodyComponent {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n  @Input() deleteConfirm: EventEmitter<any>;\n  @Input() editConfirm: EventEmitter<any>;\n  @Input() rowClassFunction: Function;\n\n  @Output() save = new EventEmitter<any>();\n  @Output() cancel = new EventEmitter<any>();\n  @Output() edit = new EventEmitter<any>();\n  @Output() delete = new EventEmitter<any>();\n  @Output() custom = new EventEmitter<any>();\n  @Output() edited = new EventEmitter<any>();\n  @Output() userSelectRow = new EventEmitter<any>();\n  @Output() editRowSelect = new EventEmitter<any>();\n  @Output() multipleSelectRow = new EventEmitter<any>();\n  @Output() rowHover = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n  mode: string;\n  editInputClass: string;\n  isActionAdd: boolean;\n  isActionEdit: boolean;\n  isActionDelete: boolean;\n  noDataMessage: boolean;\n\n  get tableColumnsCount() {\n    const actionColumns = this.isActionAdd || this.isActionEdit || this.isActionDelete ? 1 : 0;\n    return this.grid.getColumns().length + actionColumns;\n  }\n\n  ngOnChanges() {\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.mode = this.grid.getSetting('mode');\n    this.editInputClass = this.grid.getSetting('edit.inputClass');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n    this.isActionAdd = this.grid.getSetting('actions.add');\n    this.isActionEdit = this.grid.getSetting('actions.edit');\n    this.isActionDelete = this.grid.getSetting('actions.delete');\n    this.noDataMessage = this.grid.getSetting('noDataMessage');\n  }\n\n  getVisibleCells(cells: Array<Cell>): Array<Cell> {\n    return (cells || []).filter((cell: Cell) => !cell.getColumn().hide);\n  }\n}\n","import { Component, Input, EventEmitter, OnChanges, Output } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { Row } from '../../../lib/data-set/row';\n\n@Component({\n  selector: 'ng2-st-tbody-create-cancel',\n  template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-save\"\n        [innerHTML]=\"saveButtonContent\" (click)=\"onSave($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-edit-cancel\"\n        [innerHTML]=\"cancelButtonContent\" (click)=\"onCancelEdit($event)\"></a>\n  `,\n})\nexport class TbodyCreateCancelComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() editConfirm: EventEmitter<any>;\n\n  @Output() cancel = new EventEmitter<any>();\n\n  cancelButtonContent: string;\n  saveButtonContent: string;\n\n  onSave(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.grid.save(this.row, this.editConfirm);\n  }\n\n  onCancelEdit(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n    \n    this.row.isInEditing = false;\n    const ev = {\n        cancelData: this.getCancelData(),\n        data: this.row.getData(),\n        source: this.grid.source,\n    };\n    this.cancel.emit(ev);\n  }\n\n  private getCancelData(): Object {\n      const row = {};\n      for(const cell of this.row.cells) {\n          row[cell.getId()] = cell.newValue;\n      }\n      return row;\n  }\n\n  ngOnChanges() {\n    this.saveButtonContent = this.grid.getSetting('edit.saveButtonContent');\n    this.cancelButtonContent = this.grid.getSetting('edit.cancelButtonContent')\n  }\n}\n","import {Component, Input, Output, EventEmitter, OnChanges, ChangeDetectionStrategy } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { Row } from '../../../lib/data-set/row';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: 'ng2-st-tbody-edit-delete',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <a href=\"#\" *ngIf=\"isActionEdit\" class=\"ng2-smart-action ng2-smart-action-edit-edit\"\n        [innerHTML]=\"editRowButtonContent\" (click)=\"onEdit($event)\"></a>\n    <a href=\"#\" *ngIf=\"isActionDelete\" class=\"ng2-smart-action ng2-smart-action-delete-delete\"\n        [innerHTML]=\"deleteRowButtonContent\" (click)=\"onDelete($event)\"></a>\n  `,\n})\nexport class TbodyEditDeleteComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() source: DataSource;\n  @Input() deleteConfirm: EventEmitter<any>;\n  @Input() editConfirm: EventEmitter<any>;\n\n  @Output() edit = new EventEmitter<any>();\n  @Output() delete = new EventEmitter<any>();\n  @Output() editRowSelect = new EventEmitter<any>();\n\n  isActionEdit: boolean;\n  isActionDelete: boolean;\n  editRowButtonContent: string;\n  deleteRowButtonContent: string;\n\n  onEdit(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    this.editRowSelect.emit(this.row);\n\n    if (this.grid.getSetting('mode') === 'external') {\n      this.edit.emit({\n        data: this.row.getData(),\n        source: this.source,\n      });\n    } else {\n      this.grid.edit(this.row);\n    }\n  }\n\n  onDelete(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n\n    if (this.grid.getSetting('mode') === 'external') {\n      this.delete.emit({\n        data: this.row.getData(),\n        source: this.source,\n      });\n    } else {\n      this.grid.delete(this.row, this.deleteConfirm);\n    }\n  }\n\n  ngOnChanges(){\n    this.isActionEdit = this.grid.getSetting('actions.edit');\n    this.isActionDelete = this.grid.getSetting('actions.delete');\n    this.editRowButtonContent = this.grid.getSetting('edit.editButtonContent');\n    this.deleteRowButtonContent = this.grid.getSetting('delete.deleteButtonContent');\n  }\n}\n","import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { Row } from '../../../lib/data-set/row';\n\nimport { Grid } from '../../../lib/grid';\n\n@Component({\n    selector: 'ng2-st-tbody-custom',\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    template: `\n      <a *ngFor=\"let action of grid.getSetting('actions.custom')\" href=\"#\"\n         class=\"ng2-smart-action ng2-smart-action-custom-custom\" \n         [innerHTML]=\"action.title\"\n         (click)=\"onCustom(action, $event)\"></a>\n        `\n})\nexport class TbodyCustomComponent {\n\n    @Input() grid: Grid;\n    @Input() row: Row;\n    @Input() source: any;\n    @Output() custom = new EventEmitter<any>();\n\n    onCustom(action: any, event: any) {\n        event.preventDefault();\n        event.stopPropagation();\n\n        this.custom.emit({\n            action: action.name,\n            data: this.row.getData(),\n            source: this.source\n        });\n    }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { CellModule } from '../cell/cell.module';\n\nimport { Ng2SmartTableTbodyComponent } from './tbody.component';\nimport { TbodyCreateCancelComponent } from './cells/create-cancel.component';\nimport { TbodyEditDeleteComponent } from './cells/edit-delete.component';\nimport { TbodyCustomComponent } from './cells/custom.component';\n\nconst TBODY_COMPONENTS = [\n  TbodyCreateCancelComponent,\n  TbodyEditDeleteComponent,\n  TbodyCustomComponent,\n  Ng2SmartTableTbodyComponent\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    CellModule,\n  ],\n  declarations: [\n    ...TBODY_COMPONENTS,\n  ],\n  exports: [\n    ...TBODY_COMPONENTS,\n  ],\n})\nexport class TBodyModule { }\n","import {Component, Input, Output, EventEmitter, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../lib/grid';\nimport { DataSource } from '../../lib/data-source/data-source';\n\n@Component({\n    selector: '[ng2-st-thead]',\n    templateUrl: './thead.component.html',\n})\nexport class Ng2SmartTableTheadComponent implements OnChanges {\n\n    @Input() grid: Grid;\n    @Input() source: DataSource;\n    @Input() isAllSelected: boolean;\n    @Input() createConfirm: EventEmitter<any>;\n\n    @Output() sort = new EventEmitter<any>();\n    @Output() selectAllRows = new EventEmitter<any>();\n    @Output() create = new EventEmitter<any>();\n    @Output() createCancel = new EventEmitter<any>();\n    @Output() filter = new EventEmitter<any>();\n\n    isHideHeader: boolean;\n    isHideSubHeader: boolean;  \n    \n  ngOnChanges() {\n      this.isHideHeader = this.grid.getSetting('hideHeader');\n      this.isHideSubHeader = this.grid.getSetting('hideSubHeader');\n    }\n}\n","import {Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\n\n@Component({\n  selector: 'ng2-st-actions',\n  template: `\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-create\"\n        [innerHTML]=\"createButtonContent\"\n        (click)=\"$event.preventDefault();create.emit($event)\"></a>\n    <a href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-cancel\"\n        [innerHTML]=\"cancelButtonContent\"\n        (click)=\"onCancel($event)\"></a>\n  `,\n})\nexport class ActionsComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Output() create = new EventEmitter<any>();\n  @Output() createCancel = new EventEmitter<any>();\n\n  createButtonContent: string;\n  cancelButtonContent: string;\n\n  onCancel(event: any) {\n    event.preventDefault();\n    this.grid.createFormShown = false;\n    const ev = {\n        cancelData: this.getCancelData(),\n        source: this.grid.source,\n    };\n    this.createCancel.emit(ev);\n  }\n\n  private getCancelData(): Object {\n      const row = {};\n      for(const cell of this.grid.dataSet.newRow.cells) {\n          row[cell.getId()] = cell.newValue;\n      }\n      return row;\n  }\n\n  ngOnChanges() {\n    this.createButtonContent = this.grid.getSetting('add.createButtonContent');\n    this.cancelButtonContent = this.grid.getSetting('add.cancelButtonContent');\n  }\n}\n","import {Component, Input, AfterViewInit, ElementRef, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\n\n@Component({\n  selector: '[ng2-st-actions-title]',\n  template: `\n    <div class=\"ng2-smart-title\">{{ actionsColumnTitle }}</div>\n  `,\n})\nexport class ActionsTitleComponent implements AfterViewInit, OnChanges {\n\n  @Input() grid: Grid;\n\n  actionsColumnTitle: string;\n\n  constructor(private ref: ElementRef) {\n  }\n\n  ngAfterViewInit() {\n    this.ref.nativeElement.classList.add('ng2-smart-actions');\n  }\n\n  ngOnChanges() {\n    this.actionsColumnTitle = this.grid.getSetting('actions.columnTitle');\n  }\n}\n","import { Component, Input, Output, EventEmitter, AfterViewInit, ElementRef, OnChanges } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: '[ng2-st-add-button]',\n  template: `\n    <a *ngIf=\"isActionAdd\" href=\"#\" class=\"ng2-smart-action ng2-smart-action-add-add\"\n        [innerHTML]=\"addNewButtonContent\" (click)=\"onAdd($event)\"></a>\n  `,\n})\nexport class AddButtonComponent implements AfterViewInit, OnChanges {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n  @Output() create = new EventEmitter<any>();\n\n  isActionAdd: boolean;\n  addNewButtonContent: string;\n\n  constructor(private ref: ElementRef) {\n  }\n\n  ngAfterViewInit() {\n    this.ref.nativeElement.classList.add('ng2-smart-actions-title', 'ng2-smart-actions-title-add');\n  }\n\n  ngOnChanges() {\n    this.isActionAdd = this.grid.getSetting('actions.add');\n    this.addNewButtonContent = this.grid.getSetting('add.addButtonContent');\n  }\n\n  onAdd(event: any) {\n    event.preventDefault();\n    event.stopPropagation();\n    if (this.grid.getSetting('mode') === 'external') {\n      this.create.emit({\n        source: this.source,\n      });\n    } else {\n      this.grid.createFormShown = true;\n    }\n  }\n}\n","import { Component, Input } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: '[ng2-st-checkbox-select-all]',\n  template: `\n    <input type=\"checkbox\" [ngModel]=\"isAllSelected\">\n  `,\n})\nexport class CheckboxSelectAllComponent {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n  @Input() isAllSelected: boolean;\n}\n","import { Component, Input, Output, EventEmitter } from '@angular/core';\n\nimport { Column } from '../../../lib/data-set/column';\nimport { DataSource } from '../../../lib/data-source/data-source';\n\n@Component({\n  selector: 'ng2-st-column-title',\n  template: `\n    <div class=\"ng2-smart-title\">\n      <ng2-smart-table-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-smart-table-title>\n    </div>\n  `,\n})\nexport class ColumnTitleComponent {\n\n  @Input() column: Column;\n  @Input() source: DataSource;\n\n  @Output() sort = new EventEmitter<any>();\n\n}\n","import { Component, Input, Output, EventEmitter, OnChanges, SimpleChanges } from '@angular/core';\nimport { Subscription } from 'rxjs';\n\nimport { DataSource } from '../../../../lib/data-source/data-source';\nimport { Column } from '../../../../lib/data-set/column';\n\n@Component({\n  selector: 'ng2-smart-table-title',\n  styleUrls: ['./title.component.scss'],\n  template: `\n    <a href=\"#\" *ngIf=\"column.isSortable\"\n                (click)=\"_sort($event)\"\n                class=\"ng2-smart-sort-link sort\"\n                [ngClass]=\"currentDirection\">\n      {{ column.title }}\n    </a>\n    <span class=\"ng2-smart-sort\" *ngIf=\"!column.isSortable\">{{ column.title }}</span>\n  `,\n})\nexport class TitleComponent implements OnChanges {\n\n  currentDirection = '';\n  @Input() column: Column;\n  @Input() source: DataSource;\n  @Output() sort = new EventEmitter<any>();\n\n  protected dataChangedSub: Subscription;\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.source) {\n      if (!changes.source.firstChange) {\n        this.dataChangedSub.unsubscribe();\n      }\n      this.dataChangedSub = this.source.onChanged().subscribe((dataChanges) => {\n        const sortConf = this.source.getSort();\n\n        if (sortConf.length > 0 && sortConf[0]['field'] === this.column.id) {\n          this.currentDirection = sortConf[0]['direction'];\n        } else {\n          this.currentDirection = '';\n        }\n\n        sortConf.forEach((fieldConf: any) => {\n\n        });\n      });\n    }\n  }\n\n  _sort(event: any) {\n    event.preventDefault();\n    this.changeSortDirection();\n    this.source.setSort([\n      {\n        field: this.column.id,\n        direction: this.currentDirection,\n        compare: this.column.getCompareFunction(),\n      },\n    ]);\n    this.sort.emit(null);\n  }\n\n  changeSortDirection(): string {\n    if (this.currentDirection) {\n      const newDirection = this.currentDirection === 'asc' ? 'desc' : 'asc';\n      this.currentDirection = newDirection;\n    } else {\n      this.currentDirection = this.column.sortDirection;\n    }\n    return this.currentDirection;\n  }\n}\n","import {Component, Input, Output, EventEmitter, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\nimport { Column } from \"../../../lib/data-set/column\";\n\n@Component({\n  selector: '[ng2-st-thead-filters-row]',\n  template: `\n    <th *ngIf=\"isMultiSelectVisible\"></th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnLeft\"\n                          [grid]=\"grid\"\n                          (create)=\"create.emit($event)\">\n    </th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\" class=\"ng2-smart-th {{ column.id }}\">\n      <ng2-smart-table-filter [source]=\"source\"\n                              [column]=\"column\"\n                              [inputClass]=\"filterInputClass\"\n                              (filter)=\"filter.emit($event)\">\n      </ng2-smart-table-filter>\n    </th>\n    <th ng2-st-add-button *ngIf=\"showActionColumnRight\"\n                          [grid]=\"grid\"\n                          [source]=\"source\"\n                          (create)=\"create.emit($event)\">\n    </th>\n  `,\n})\nexport class TheadFitlersRowComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() source: DataSource;\n\n  @Output() create = new EventEmitter<any>();\n  @Output() filter = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n  filterInputClass: string;\n\n  ngOnChanges() {\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n    this.filterInputClass = this.grid.getSetting('filter.inputClass');\n  }\n\n  getVisibleColumns(columns: Array<Column>): Array<Column> {\n    return (columns || []).filter((column: Column) => !column.hide);\n  }\n}\n","import { Component, Input, Output, EventEmitter, OnChanges } from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { Row } from '../../../lib/data-set/row';\nimport { Cell } from '../../../lib/data-set/cell';\n\n@Component({\n  selector: '[ng2-st-thead-form-row]',\n  template: `\n      <td *ngIf=\"isMultiSelectVisible\"></td>\n      <td  *ngIf=\"showActionColumnLeft\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\" (createCancel)=\"createCancel.emit($event)\"></ng2-st-actions>\n      </td>\n      <td *ngFor=\"let cell of getVisibleCells(grid.getNewRow().getCells())\">\n        <ng2-smart-table-cell [cell]=\"cell\"\n                              [grid]=\"grid\"\n                              [isNew]=\"true\"\n                              [createConfirm]=\"createConfirm\"\n                              [inputClass]=\"addInputClass\"\n                              [isInEditing]=\"grid.getNewRow().isInEditing\"\n                              (edited)=\"onCreate($event)\">\n        </ng2-smart-table-cell>\n      </td>\n      <td  *ngIf=\"showActionColumnRight\"  class=\"ng2-smart-actions\">\n        <ng2-st-actions [grid]=\"grid\" (create)=\"onCreate($event)\" (createCancel)=\"createCancel.emit($event)\"></ng2-st-actions>\n      </td>\n  `,\n})\nexport class TheadFormRowComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() row: Row;\n  @Input() createConfirm: EventEmitter<any>;\n\n  @Output() create = new EventEmitter<any>();\n  @Output() createCancel = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n  addInputClass: string;\n\n  onCreate(event: any) {\n    event.stopPropagation();\n\n    this.grid.create(this.grid.getNewRow(), this.createConfirm);\n  }\n\n  ngOnChanges(){\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n    this.addInputClass = this.grid.getSetting('add.inputClass');\n  }\n\n  getVisibleCells(cells: Array<Cell>): Array<Cell> {\n    return (cells || []).filter((cell: Cell) => !cell.getColumn().hide);\n  }\n}\n","import {Component, Input, Output, EventEmitter, OnChanges} from '@angular/core';\n\nimport { Grid } from '../../../lib/grid';\nimport { DataSource } from '../../../lib/data-source/data-source';\nimport { Column } from \"../../../lib/data-set/column\";\n\n@Component({\n  selector: '[ng2-st-thead-titles-row]',\n  template: `\n    <th ng2-st-checkbox-select-all *ngIf=\"isMultiSelectVisible\"\n                                   [grid]=\"grid\"\n                                   [source]=\"source\"\n                                   [isAllSelected]=\"isAllSelected\"\n                                   (click)=\"selectAllRows.emit($event)\">\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnLeft\" [grid]=\"grid\"></th>\n    <th *ngFor=\"let column of getVisibleColumns(grid.getColumns())\"\n        class=\"ng2-smart-th {{ column.id }}\"\n        [ngClass]=\"column.class\"\n        [style.width]=\"column.width\">\n      <ng2-st-column-title [source]=\"source\" [column]=\"column\" (sort)=\"sort.emit($event)\"></ng2-st-column-title>\n    </th>\n    <th ng2-st-actions-title *ngIf=\"showActionColumnRight\" [grid]=\"grid\"></th>\n  `,\n})\nexport class TheadTitlesRowComponent implements OnChanges {\n\n  @Input() grid: Grid;\n  @Input() isAllSelected: boolean;\n  @Input() source: DataSource;\n\n  @Output() sort = new EventEmitter<any>();\n  @Output() selectAllRows = new EventEmitter<any>();\n\n  isMultiSelectVisible: boolean;\n  showActionColumnLeft: boolean;\n  showActionColumnRight: boolean;\n\n\n  ngOnChanges() {\n    this.isMultiSelectVisible = this.grid.isMultiSelectVisible();\n    this.showActionColumnLeft = this.grid.showActionColumn('left');\n    this.showActionColumnRight = this.grid.showActionColumn('right');\n  }\n\n  getVisibleColumns(columns: Array<Column>): Array<Column> {\n    return (columns || []).filter((column: Column) => !column.hide);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { FilterModule } from '../filter/filter.module';\nimport { CellModule } from '../cell/cell.module';\n\nimport { Ng2SmartTableTheadComponent } from './thead.component';\nimport { ActionsComponent } from './cells/actions.component';\nimport { ActionsTitleComponent } from './cells/actions-title.component';\nimport { AddButtonComponent } from './cells/add-button.component';\nimport { CheckboxSelectAllComponent } from './cells/checkbox-select-all.component';\nimport { ColumnTitleComponent } from './cells/column-title.component';\nimport { TitleComponent } from './cells/title/title.component';\nimport { TheadFitlersRowComponent } from './rows/thead-filters-row.component';\nimport { TheadFormRowComponent } from './rows/thead-form-row.component';\nimport { TheadTitlesRowComponent } from './rows/thead-titles-row.component';\n\nconst THEAD_COMPONENTS = [\n  ActionsComponent,\n  ActionsTitleComponent,\n  AddButtonComponent,\n  CheckboxSelectAllComponent,\n  ColumnTitleComponent,\n  TitleComponent,\n  TheadFitlersRowComponent,\n  TheadFormRowComponent,\n  TheadTitlesRowComponent,\n  Ng2SmartTableTheadComponent,\n];\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    FilterModule,\n    CellModule,\n  ],\n  declarations: [\n    ...THEAD_COMPONENTS,\n  ],\n  exports: [\n    ...THEAD_COMPONENTS,\n  ],\n})\nexport class THeadModule { }\n","import { cloneDeep } from 'lodash';\n\n/**\n * Extending object that entered in first argument.\n *\n * Returns extended object or false if have no target object or incorrect type.\n *\n * If you wish to clone source object (without modify it), just use empty new\n * object as first argument, like this:\n *   deepExtend({}, yourObj_1, [yourObj_N]);\n */\nexport const deepExtend = function(...objects: Array<any>): any {\n  if (arguments.length < 1 || typeof arguments[0] !== 'object') {\n    return false;\n  }\n\n  if (arguments.length < 2) {\n    return arguments[0];\n  }\n\n  const target = arguments[0];\n\n  // convert arguments to array and cut off target object\n  const args = Array.prototype.slice.call(arguments, 1);\n\n  let val, src;\n\n  args.forEach((obj: any) => {\n    // skip argument if it is array or isn't object\n    if (typeof obj !== 'object' || Array.isArray(obj)) {\n      return;\n    }\n\n    Object.keys(obj).forEach(function (key) {\n      src = target[key]; // source value\n      val = obj[key]; // new value\n\n      // recursion prevention\n      if (val === target) {\n        return;\n\n        /**\n         * if new value isn't object then just overwrite by new value\n         * instead of extending.\n         */\n      } else if (typeof val !== 'object' || val === null) {\n        target[key] = val;\n        return;\n\n        // just clone arrays (and recursive clone objects inside)\n      } else if (Array.isArray(val)) {\n        target[key] = cloneDeep(val);\n        return;\n\n        // overwrite by new value if source isn't object or array\n      } else if (typeof src !== 'object' || src === null || Array.isArray(src)) {\n        target[key] = deepExtend({}, val);\n        return;\n\n        // source value and new value is objects both, extending...\n      } else {\n        target[key] = deepExtend(src, val);\n        return;\n      }\n    });\n  });\n\n  return target;\n};\n\nexport class Deferred {\n\n  promise: Promise<any>;\n\n  resolve: any;\n  reject: any;\n\n  constructor() {\n    this.promise = new Promise((resolve, reject) => {\n      this.resolve = resolve;\n      this.reject = reject;\n    });\n  }\n}\n\n// getDeepFromObject({result: {data: 1}}, 'result.data', 2); // returns 1\nexport function getDeepFromObject(object = {}, name: string, defaultValue?: any) {\n  const keys = name.split('.');\n  // clone the object\n  let level = deepExtend({}, object);\n  keys.forEach((k) => {\n    if (level && typeof level[k] !== 'undefined') {\n      level = level[k];\n    }\n  });\n\n  return typeof level === 'undefined' ? defaultValue : level;\n}\n\nexport function getPageForRowIndex(index: number, perPage: number): number {\n  // we need to add 1 to convert 0-based index to 1-based page number.\n  return Math.floor(index / perPage) + 1;\n}\n","import { Column } from './column';\nimport { DataSet } from './data-set';\nimport { Row } from './row';\n\nexport function prepareValue (value: any) { return value }\n\nexport class Cell {\n\n  newValue: any = '';\n  protected static PREPARE = prepareValue;\n\n  constructor(protected value: any, protected row: Row, protected column: any, protected dataSet: DataSet) {\n    this.newValue = value;\n  }\n\n  getColumn(): Column {\n    return this.column;\n  }\n\n  getRow(): Row {\n    return this.row;\n  }\n\n  getValue(): any {\n    const valid = this.column.getValuePrepareFunction() instanceof Function;\n    const prepare = valid ? this.column.getValuePrepareFunction() : Cell.PREPARE;\n    return prepare.call(null, this.value, this.row.getData(), this);\n  }\n\n  setValue(value: any): any {\n    this.newValue = value;\n  }\n\n  getId(): string {\n    return this.getColumn().id;\n  }\n\n  getTitle(): string {\n    return this.getColumn().title;\n  }\n\n  isEditable(): boolean {\n    if (this.getRow().index === -1) {\n      return this.getColumn().isAddable;\n    }\n    else {\n      return this.getColumn().isEditable;\n    }\n  }\n\n}\n","import { Cell } from './cell';\nimport { Column } from './column';\nimport { DataSet } from './data-set';\n\nexport class Row {\n\n  isSelected: boolean = false;\n  isInEditing: boolean = false;\n  cells: Array<Cell> = [];\n\n\n  constructor(public index: number, protected data: any, protected _dataSet: DataSet) {\n    this.process();\n  }\n\n  getCell(column: Column): Cell {\n    return this.cells.find(el => el.getColumn() === column);\n  }\n\n  getCells() {\n    return this.cells;\n  }\n\n  getData(): any {\n    return this.data;\n  }\n\n  getIsSelected(): boolean {\n    return this.isSelected;\n  }\n\n  getNewData(): any {\n    const values = Object.assign({}, this.data);\n    this.getCells().forEach((cell) => values[cell.getColumn().id] = cell.newValue);\n    return values;\n  }\n\n  setData(data: any): any {\n    this.data = data;\n    this.process();\n  }\n\n  process() {\n    this.cells = [];\n    this._dataSet.getColumns().forEach((column: Column) => {\n      const cell = this.createCell(column);\n      this.cells.push(cell);\n    });\n  }\n\n  createCell(column: Column): Cell {\n    const defValue = (column as any).settings.defaultValue ? (column as any).settings.defaultValue : '';\n    const value = typeof this.data[column.id] === 'undefined' ? defValue : this.data[column.id];\n    return new Cell(value, this, column, this._dataSet);\n  }\n}\n","import { DataSet } from './data-set';\n\nexport class Column {\n\n  title: string = '';\n  type: string = '';\n  class: string = '';\n  width: string = '';\n  hide: boolean = false;\n  isSortable: boolean = false;\n  isEditable: boolean = true;\n  isAddable: boolean = true;\n  isFilterable: boolean = false;\n  sortDirection: string = '';\n  defaultSortDirection: string = '';\n  editor: { type: string, config: any, component: any } = { type: '', config: {}, component: null };\n  filter: { type: string, config: any, component: any } = { type: '', config: {}, component: null };\n  renderComponent: any = null;\n  compareFunction: Function;\n  valuePrepareFunction: Function;\n  filterFunction: Function;\n  onComponentInitFunction: Function;\n\n  constructor(public id: string, protected settings: any, protected dataSet: DataSet) {\n    this.process();\n  }\n\n  getOnComponentInitFunction(): Function {\n    return this.onComponentInitFunction;\n  }\n\n  getCompareFunction(): Function {\n    return this.compareFunction;\n  }\n\n  getValuePrepareFunction(): Function {\n    return this.valuePrepareFunction;\n  }\n\n  getFilterFunction(): Function {\n    return this.filterFunction;\n  }\n\n  getConfig(): any {\n    return this.editor && this.editor.config;\n  }\n\n  getFilterType(): any {\n    return this.filter && this.filter.type;\n  }\n\n  getFilterConfig(): any {\n    return this.filter && this.filter.config;\n  }\n\n  protected process() {\n    this.title = this.settings['title'];\n    this.class = this.settings['class'];\n    this.width = this.settings['width'];\n    this.hide = !!this.settings['hide'];\n    this.type = this.prepareType();\n    this.editor = this.settings['editor'];\n    this.filter = this.settings['filter'];\n    this.renderComponent = this.settings['renderComponent'];\n\n    this.isFilterable = typeof this.settings['filter'] === 'undefined' ? true : !!this.settings['filter'];\n    this.defaultSortDirection = ['asc', 'desc']\n      .indexOf(this.settings['sortDirection']) !== -1 ? this.settings['sortDirection'] : '';\n    this.isSortable = typeof this.settings['sort'] === 'undefined' ? true : !!this.settings['sort'];\n    this.isEditable = typeof this.settings['editable'] === 'undefined' ? true : !!this.settings['editable'];\n    this.isAddable=typeof this.settings['addable'] === 'undefined' ? true : !!this.settings['addable'];\n    this.sortDirection = this.prepareSortDirection();\n\n    this.compareFunction = this.settings['compareFunction'];\n    this.valuePrepareFunction = this.settings['valuePrepareFunction'];\n    this.filterFunction = this.settings['filterFunction'];\n    this.onComponentInitFunction = this.settings['onComponentInitFunction'];\n  }\n\n  prepareType(): string {\n    return this.settings['type'] || this.determineType();\n  }\n\n  prepareSortDirection(): string {\n    return this.settings['sort'] === 'desc' ? 'desc' : 'asc';\n  }\n\n  determineType(): string {\n    // TODO: determine type by data\n    return 'text';\n  }\n}\n","import { Row } from './row';\nimport { Column } from './column';\n\nexport class DataSet {\n\n  newRow: Row;\n\n  protected data: Array<any> = [];\n  protected columns: Array<Column> = [];\n  protected rows: Array<Row> = [];\n  protected selectedRow: Row;\n  protected willSelect: string;\n\n  constructor(data: Array<any> = [], protected columnSettings: Object) {\n    this.createColumns(columnSettings);\n    this.setData(data);\n\n    this.createNewRow();\n  }\n\n  setData(data: Array<any>) {\n    this.data = data;\n    this.createRows();\n  }\n\n  getColumns(): Array<Column> {\n    return this.columns;\n  }\n\n  getRows(): Array<Row> {\n    return this.rows;\n  }\n\n  getFirstRow(): Row {\n    return this.rows[0];\n  }\n\n  getLastRow(): Row {\n    return this.rows[this.rows.length - 1];\n  }\n\n  findRowByData(data: any): Row {\n    return this.rows.find((row: Row) => row.getData() === data);\n  }\n\n  deselectAll() {\n    this.rows.forEach((row) => {\n      row.isSelected = false;\n    });\n    // we need to clear selectedRow field because no one row selected\n    this.selectedRow = undefined;\n  }\n\n  selectRow(row: Row): Row | undefined {\n    const previousIsSelected = row.isSelected;\n    this.deselectAll();\n\n    row.isSelected = !previousIsSelected;\n    this.selectedRow = row;\n\n    return this.selectedRow;\n  }\n\n  multipleSelectRow(row: Row): Row {\n    row.isSelected = !row.isSelected;\n    this.selectedRow = row;\n\n    return this.selectedRow;\n  }\n\n  selectPreviousRow(): Row {\n    if (this.rows.length > 0) {\n      let index = this.selectedRow ? this.selectedRow.index : 0;\n      if (index > this.rows.length - 1) {\n        index = this.rows.length - 1;\n      }\n      this.selectRow(this.rows[index]);\n      return this.selectedRow;\n    }\n  }\n\n  selectFirstRow(): Row | undefined {\n    if (this.rows.length > 0) {\n      this.selectRow(this.rows[0]);\n      return this.selectedRow;\n    }\n  }\n\n  selectLastRow(): Row | undefined {\n    if (this.rows.length > 0) {\n      this.selectRow(this.rows[this.rows.length - 1]);\n      return this.selectedRow;\n    }\n  }\n\n  selectRowByIndex(index: number): Row | undefined {\n    const rowsLength: number = this.rows.length;\n    if (rowsLength === 0) {\n      return;\n    }\n    if (!index) {\n      this.selectFirstRow();\n      return this.selectedRow;\n    }\n    if (index > 0 && index < rowsLength) {\n      this.selectRow(this.rows[index]);\n      return this.selectedRow;\n    }\n    // we need to deselect all rows if we got an incorrect index\n    this.deselectAll();\n  }\n\n  willSelectFirstRow() {\n    this.willSelect = 'first';\n  }\n\n  willSelectLastRow() {\n    this.willSelect = 'last';\n  }\n\n  select(selectedRowIndex?: number): Row | undefined {\n    if (this.getRows().length === 0) {\n      return;\n    }\n    if (this.willSelect) {\n      if (this.willSelect === 'first') {\n        this.selectFirstRow();\n      }\n      if (this.willSelect === 'last') {\n        this.selectLastRow();\n      }\n      this.willSelect = '';\n    } else {\n      this.selectRowByIndex(selectedRowIndex);\n    }\n\n    return this.selectedRow;\n  }\n\n  createNewRow() {\n    this.newRow = new Row(-1, {}, this);\n    this.newRow.isInEditing = true;\n  }\n\n  /**\n   * Create columns by mapping from the settings\n   * @param settings\n   * @private\n   */\n  createColumns(settings: any) {\n    for (const id in settings) {\n      if (settings.hasOwnProperty(id)) {\n        this.columns.push(new Column(id, settings[id], this));\n      }\n    }\n  }\n\n  /**\n   * Create rows based on current data prepared in data source\n   * @private\n   */\n  createRows() {\n    this.rows = [];\n    this.data.forEach((el, index) => {\n      this.rows.push(new Row(index, el, this));\n    });\n  }\n}\n","import { Subject, Subscription } from 'rxjs';\nimport { Observable } from 'rxjs';\nimport { EventEmitter } from '@angular/core';\n\nimport { Deferred, getDeepFromObject, getPageForRowIndex } from './helpers';\nimport { Column } from './data-set/column';\nimport { Row } from './data-set/row';\nimport { DataSet } from './data-set/data-set';\nimport { DataSource } from './data-source/data-source';\n\nexport class Grid {\n\n  createFormShown: boolean = false;\n\n  source: DataSource;\n  settings: any;\n  dataSet: DataSet;\n\n  onSelectRowSource = new Subject<any>();\n  onDeselectRowSource = new Subject<any>();\n\n  private sourceOnChangedSubscription: Subscription;\n  private sourceOnUpdatedSubscription: Subscription;\n\n  constructor(source: DataSource, settings: any) {\n    this.setSettings(settings);\n    this.setSource(source);\n  }\n\n  detach(): void {\n    if (this.sourceOnChangedSubscription) {\n      this.sourceOnChangedSubscription.unsubscribe();\n    }\n    if (this.sourceOnUpdatedSubscription) {\n      this.sourceOnUpdatedSubscription.unsubscribe();\n    }\n  }\n\n  showActionColumn(position: string): boolean {\n    return this.isCurrentActionsPosition(position) && this.isActionsVisible();\n  }\n\n  isCurrentActionsPosition(position: string): boolean {\n    return position == this.getSetting('actions.position');\n  }\n\n  isActionsVisible(): boolean {\n    return this.getSetting('actions.add') || this.getSetting('actions.edit') || this.getSetting('actions.delete') || this.getSetting('actions.custom').length;\n  }\n\n  isMultiSelectVisible(): boolean {\n    return this.getSetting('selectMode') === 'multi';\n  }\n\n  getNewRow(): Row {\n    return this.dataSet.newRow;\n  }\n\n  setSettings(settings: Object) {\n    this.settings = settings;\n    this.dataSet = new DataSet([], this.getSetting('columns'));\n\n    if (this.source) {\n      this.source.refresh();\n    }\n  }\n\n  getDataSet(): DataSet {\n    return this.dataSet;\n  }\n\n  setSource(source: DataSource) {\n    this.source = this.prepareSource(source);\n    this.detach();\n\n    this.sourceOnChangedSubscription = this.source.onChanged().subscribe((changes: any) => this.processDataChange(changes));\n\n    this.sourceOnUpdatedSubscription = this.source.onUpdated().subscribe((data: any) => {\n      const changedRow = this.dataSet.findRowByData(data);\n      changedRow.setData(data);\n    });\n  }\n\n  getSetting(name: string, defaultValue?: any): any {\n    return getDeepFromObject(this.settings, name, defaultValue);\n  }\n\n  getColumns(): Array<Column> {\n    return this.dataSet.getColumns();\n  }\n\n  getRows(): Array<Row> {\n    return this.dataSet.getRows();\n  }\n\n  selectRow(row: Row) {\n    this.dataSet.selectRow(row);\n  }\n\n  multipleSelectRow(row: Row) {\n    this.dataSet.multipleSelectRow(row);\n  }\n\n  onSelectRow(): Observable<any> {\n    return this.onSelectRowSource.asObservable();\n  }\n\n  onDeselectRow(): Observable<any> {\n    return this.onDeselectRowSource.asObservable();\n  }\n\n  edit(row: Row) {\n    row.isInEditing = true;\n  }\n\n  create(row: Row, confirmEmitter: EventEmitter<any>) {\n\n    const deferred = new Deferred();\n    deferred.promise.then((newData) => {\n      newData = newData ? newData : row.getNewData();\n      if (deferred.resolve.skipAdd) {\n        this.createFormShown = false;\n      } else {\n        this.source.prepend(newData).then(() => {\n          this.createFormShown = false;\n          this.dataSet.createNewRow();\n        });\n      }\n    }).catch((err) => {\n      // doing nothing\n    });\n\n    if (this.getSetting('add.confirmCreate')) {\n      confirmEmitter.emit({\n        newData: row.getNewData(),\n        source: this.source,\n        confirm: deferred,\n      });\n    } else {\n      deferred.resolve();\n    }\n  }\n\n  save(row: Row, confirmEmitter: EventEmitter<any>) {\n\n    const deferred = new Deferred();\n    deferred.promise.then((newData) => {\n      newData = newData ? newData : row.getNewData();\n      if (deferred.resolve.skipEdit) {\n        row.isInEditing = false;\n      } else {\n        this.source.update(row.getData(), newData).then(() => {\n          row.isInEditing = false;\n        });\n      }\n    }).catch((err) => {\n      // doing nothing\n    });\n\n    if (this.getSetting('edit.confirmSave')) {\n      confirmEmitter.emit({\n        data: row.getData(),\n        newData: row.getNewData(),\n        source: this.source,\n        confirm: deferred,\n      });\n    } else {\n      deferred.resolve();\n    }\n  }\n\n  delete(row: Row, confirmEmitter: EventEmitter<any>) {\n\n    const deferred = new Deferred();\n    deferred.promise.then(() => {\n      this.source.remove(row.getData());\n    }).catch((err) => {\n      // doing nothing\n    });\n\n    if (this.getSetting('delete.confirmDelete')) {\n      confirmEmitter.emit({\n        data: row.getData(),\n        source: this.source,\n        confirm: deferred,\n      });\n    } else {\n      deferred.resolve();\n    }\n  }\n\n  processDataChange(changes: any) {\n    if (this.shouldProcessChange(changes)) {\n      this.dataSet.setData(changes['elements']);\n      if (this.getSetting('selectMode') !== 'multi') {\n        const row = this.determineRowToSelect(changes);\n\n        if (row) {\n          this.onSelectRowSource.next(row);\n        } else {\n          this.onDeselectRowSource.next(null);\n        }\n      }\n    }\n  }\n\n  shouldProcessChange(changes: any): boolean {\n    if (['filter', 'sort', 'page', 'remove', 'refresh', 'load', 'paging'].indexOf(changes['action']) !== -1) {\n      return true;\n    } else if (['prepend', 'append'].indexOf(changes['action']) !== -1 && !this.getSetting('pager.display')) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * @breaking-change 1.8.0\n   * Need to add `| null` in return type\n   *\n   * TODO: move to selectable? Separate directive\n   */\n  determineRowToSelect(changes: any): Row {\n\n    if (['load', 'page', 'filter', 'sort', 'refresh'].indexOf(changes['action']) !== -1) {\n      return this.dataSet.select(this.getRowIndexToSelect());\n    }\n\n    if (this.shouldSkipSelection()) {\n      return null;\n    }\n\n    if (changes['action'] === 'remove') {\n      if (changes['elements'].length === 0) {\n        // we have to store which one to select as the data will be reloaded\n        this.dataSet.willSelectLastRow();\n      } else {\n        return this.dataSet.selectPreviousRow();\n      }\n    }\n    if (changes['action'] === 'append') {\n      // we have to store which one to select as the data will be reloaded\n      this.dataSet.willSelectLastRow();\n    }\n    if (changes['action'] === 'add') {\n      return this.dataSet.selectFirstRow();\n    }\n    if (changes['action'] === 'update') {\n      return this.dataSet.selectFirstRow();\n    }\n    if (changes['action'] === 'prepend') {\n      // we have to store which one to select as the data will be reloaded\n      this.dataSet.willSelectFirstRow();\n    }\n    return null;\n  }\n\n  prepareSource(source: any): DataSource {\n    const initialSource: any = this.getInitialSort();\n    if (initialSource && initialSource['field'] && initialSource['direction']) {\n      source.setSort([initialSource], false);\n    }\n    if (this.getSetting('pager.display') === true) {\n      source.setPaging(this.getPageToSelect(source), this.getSetting('pager.perPage'), false);\n    }\n\n    source.refresh();\n    return source;\n  }\n\n  getInitialSort() {\n    const sortConf: any = {};\n    this.getColumns().forEach((column: Column) => {\n      if (column.isSortable && column.defaultSortDirection) {\n        sortConf['field'] = column.id;\n        sortConf['direction'] = column.defaultSortDirection;\n        sortConf['compare'] = column.getCompareFunction();\n      }\n    });\n    return sortConf;\n  }\n\n  getSelectedRows(): Array<any> {\n    return this.dataSet.getRows()\n      .filter(r => r.isSelected);\n  }\n\n  selectAllRows(status: any) {\n    this.dataSet.getRows()\n      .forEach(r => r.isSelected = status);\n  }\n\n  getFirstRow(): Row {\n    return this.dataSet.getFirstRow();\n  }\n\n  getLastRow(): Row {\n    return this.dataSet.getLastRow();\n  }\n\n  private getSelectionInfo(): { perPage: number, page: number, selectedRowIndex: number, switchPageToSelectedRowPage: boolean } {\n    const switchPageToSelectedRowPage: boolean = this.getSetting('switchPageToSelectedRowPage');\n    const selectedRowIndex: number = Number(this.getSetting('selectedRowIndex', 0)) || 0;\n    const { perPage, page }: { perPage: number, page: number } = this.getSetting('pager');\n    return { perPage, page, selectedRowIndex, switchPageToSelectedRowPage };\n  }\n\n  private getRowIndexToSelect(): number {\n    const { switchPageToSelectedRowPage, selectedRowIndex, perPage } = this.getSelectionInfo();\n    const dataAmount: number = this.source.count();\n    /**\n     * source - contains all table data\n     * dataSet - contains data for current page\n     * selectedRowIndex - contains index for data in all data\n     *\n     * because of that, we need to count index for a specific row in page\n     * if\n     * `switchPageToSelectedRowPage` - we need to change page automatically\n     * `selectedRowIndex < dataAmount && selectedRowIndex >= 0` - index points to existing data\n     * (if index points to non-existing data and we calculate index for current page - we will get wrong selected row.\n     *  if we return index witch not points to existing data - no line will be highlighted)\n     */\n    return (\n      switchPageToSelectedRowPage &&\n      selectedRowIndex < dataAmount &&\n      selectedRowIndex >= 0\n    ) ?\n      selectedRowIndex % perPage :\n      selectedRowIndex;\n  }\n\n  private getPageToSelect(source: DataSource): number {\n    const { switchPageToSelectedRowPage, selectedRowIndex, perPage, page } = this.getSelectionInfo();\n    let pageToSelect: number = Math.max(1, page);\n    if (switchPageToSelectedRowPage && selectedRowIndex >= 0) {\n      pageToSelect = getPageForRowIndex(selectedRowIndex, perPage);\n    }\n    const maxPageAmount: number = Math.ceil(source.count() / perPage);\n    return maxPageAmount ? Math.min(pageToSelect, maxPageAmount) : pageToSelect;\n  }\n\n  private shouldSkipSelection(): boolean {\n    /**\n     * For backward compatibility when using `selectedRowIndex` with non-number values - ignored.\n     *\n     * Therefore, in order to select a row after some changes,\n     * the `selectedRowIndex` value must be invalid or >= 0 (< 0 means that no row is selected).\n     *\n     * `Number(value)` returns `NaN` on all invalid cases, and comparisons with `NaN` always return `false`.\n     *\n     * !!! We should skip a row only in cases when `selectedRowIndex` < 0\n     * because when < 0 all lines must be deselected\n     */\n    const selectedRowIndex = Number(this.getSetting('selectedRowIndex'));\n    return selectedRowIndex < 0;\n  }\n}\n","import { Subject } from 'rxjs';\nimport { Observable } from 'rxjs';\n\nexport abstract class DataSource {\n\n  protected onChangedSource = new Subject<any>();\n  protected onAddedSource = new Subject<any>();\n  protected onUpdatedSource = new Subject<any>();\n  protected onRemovedSource = new Subject<any>();\n\n  abstract getAll(): Promise<any>;\n  abstract getElements(): Promise<any>;\n  abstract getSort(): any;\n  abstract getFilter(): any;\n  abstract getPaging(): any;\n  abstract count(): number;\n\n  refresh() {\n    this.emitOnChanged('refresh');\n  }\n\n  load(data: Array<any>): Promise<any> {\n    this.emitOnChanged('load');\n    return Promise.resolve();\n  }\n\n  onChanged(): Observable<any> {\n    return this.onChangedSource.asObservable();\n  }\n\n  onAdded(): Observable<any> {\n    return this.onAddedSource.asObservable();\n  }\n\n  onUpdated(): Observable<any> {\n    return this.onUpdatedSource.asObservable();\n  }\n\n  onRemoved(): Observable<any> {\n    return this.onRemovedSource.asObservable();\n  }\n\n  prepend(element: any): Promise<any> {\n    this.emitOnAdded(element);\n    this.emitOnChanged('prepend');\n    return Promise.resolve();\n  }\n\n  append(element: any): Promise<any> {\n    this.emitOnAdded(element);\n    this.emitOnChanged('append');\n    return Promise.resolve();\n  }\n\n  add(element: any): Promise<any> {\n    this.emitOnAdded(element);\n    this.emitOnChanged('add');\n    return Promise.resolve();\n  }\n\n  remove(element: any): Promise<any> {\n    this.emitOnRemoved(element);\n    this.emitOnChanged('remove');\n    return Promise.resolve();\n  }\n\n  update(element: any, values: any): Promise<any> {\n    this.emitOnUpdated(element);\n    this.emitOnChanged('update');\n    return Promise.resolve();\n  }\n\n  empty(): Promise<any> {\n    this.emitOnChanged('empty');\n    return Promise.resolve();\n  }\n\n  setSort(conf: Array<any>, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('sort');\n    }\n  }\n\n  setFilter(conf: Array<any>, andOperator?: boolean, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('filter');\n    }\n  }\n\n  addFilter(fieldConf: {}, andOperator?: boolean, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('filter');\n    }\n  }\n\n  setPaging(page: number, perPage: number, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('paging');\n    }\n  }\n\n  setPage(page: number, doEmit?: boolean) {\n    if (doEmit) {\n      this.emitOnChanged('page');\n    }\n  }\n\n  protected emitOnRemoved(element: any) {\n    this.onRemovedSource.next(element);\n  }\n\n  protected emitOnUpdated(element: any) {\n    this.onUpdatedSource.next(element);\n  }\n\n  protected emitOnAdded(element: any) {\n    this.onAddedSource.next(element);\n  }\n\n  protected emitOnChanged(action: string) {\n    this.getElements().then((elements) => this.onChangedSource.next({\n      action: action,\n      elements: elements,\n      paging: this.getPaging(),\n      filter: this.getFilter(),\n      sort: this.getSort(),\n    }));\n  }\n}\n","export function compareValues(direction: any, a: any, b: any) {\n  if (a < b) {\n    return -1 * direction;\n  }\n  if (a > b) {\n    return direction;\n  }\n  return 0;\n}\n\nexport class LocalSorter {\n\n  static sort(data: Array<any>, field: string, direction: string, customCompare?: Function): Array<any> {\n\n    const dir: number = (direction === 'asc') ? 1 : -1;\n    const compare: Function = customCompare ? customCompare : compareValues;\n\n    return data.sort((a, b) => {\n      return compare.call(null, dir, a[field], b[field]);\n    });\n  }\n}\n","export function filterValues(value: string, search: string) {\n  return value.toString().toLowerCase().includes(search.toString().toLowerCase());\n}\n\nexport class LocalFilter {\n\n  static filter(data: Array<any>, field: string, search: string, customFilter?: Function): Array<any> {\n    const filter: Function = customFilter ? customFilter : filterValues;\n\n    return data.filter((el) => {\n      const value = typeof el[field] === 'undefined' || el[field] === null ? '' : el[field];\n      return filter.call(null, value, search);\n    });\n  }\n}\n","export class LocalPager {\n\n  static paginate(data: Array<any>, page: number, perPage: number): Array<any> {\n    return data.slice(perPage * (page - 1), perPage * page);\n  }\n}\n","import { LocalSorter } from './local.sorter';\nimport { LocalFilter } from './local.filter';\nimport { LocalPager } from './local.pager';\nimport { DataSource } from '../data-source';\nimport { deepExtend } from '../../helpers';\n\nexport class LocalDataSource extends DataSource {\n\n  protected data: Array<any> = [];\n  protected filteredAndSorted: Array<any> = [];\n  protected sortConf: Array<any> = [];\n  protected filterConf: any = {\n    filters: [],\n    andOperator: true,\n  };\n  protected pagingConf: any = {};\n\n  constructor(data: Array<any> = []) {\n    super();\n\n    this.data = data;\n  }\n\n  load(data: Array<any>): Promise<any> {\n    this.data = data;\n\n    return super.load(data);\n  }\n\n  prepend(element: any): Promise<any> {\n    this.reset(true);\n\n    this.data.unshift(element);\n    return super.prepend(element);\n  }\n\n  append(element: any): Promise<any> {\n    this.reset(true);\n\n    this.data.push(element);\n    return super.append(element);\n  }\n\n  add(element: any): Promise<any> {\n    this.data.push(element);\n\n    return super.add(element);\n  }\n\n  remove(element: any): Promise<any> {\n    this.data = this.data.filter(el => el !== element);\n\n    return super.remove(element);\n  }\n\n  update(element: any, values: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.find(element).then((found) => {\n        found = deepExtend(found, values);\n        super.update(found, values).then(resolve).catch(reject);\n      }).catch(reject);\n    });\n  }\n\n  find(element: any): Promise<any> {\n    const found = this.data.find(el => el === element);\n    if (found) {\n      return Promise.resolve(found);\n    }\n\n    return Promise.reject(new Error('Element was not found in the dataset'));\n  }\n\n  getElements(): Promise<any> {\n    const data = this.data.slice(0);\n    return Promise.resolve(this.prepareData(data));\n  }\n\n  getFilteredAndSorted(): Promise<any> {\n    let data = this.data.slice(0);\n    this.prepareData(data);\n    return Promise.resolve(this.filteredAndSorted);\n  }\n\n  getAll(): Promise<any> {\n    const data = this.data.slice(0);\n    return Promise.resolve(data);\n  }\n\n  reset(silent = false) {\n    if (silent) {\n      this.filterConf = {\n        filters: [],\n        andOperator: true,\n      };\n      this.sortConf = [];\n      this.pagingConf['page'] = 1;\n    } else {\n      this.setFilter([], true, false);\n      this.setSort([], false);\n      this.setPage(1);\n    }\n  }\n\n  empty(): Promise<any> {\n    this.data = [];\n\n    return super.empty();\n  }\n\n  count(): number {\n    return this.filteredAndSorted.length;\n  }\n\n  /**\n   *\n   * Array of conf objects\n   * [\n   *  {field: string, direction: asc|desc|null, compare: Function|null},\n   * ]\n   * @param conf\n   * @param doEmit\n   * @returns {LocalDataSource}\n   */\n  setSort(conf: Array<any>, doEmit = true): LocalDataSource {\n    if (conf !== null) {\n\n      conf.forEach((fieldConf) => {\n        if (!fieldConf['field'] || typeof fieldConf['direction'] === 'undefined') {\n          throw new Error('Sort configuration object is not valid');\n        }\n      });\n      this.sortConf = conf;\n    }\n\n    super.setSort(conf, doEmit);\n    return this;\n  }\n\n  /**\n   *\n   * Array of conf objects\n   * [\n   *  {field: string, search: string, filter: Function|null},\n   * ]\n   * @param conf\n   * @param andOperator\n   * @param doEmit\n   * @returns {LocalDataSource}\n   */\n  setFilter(conf: Array<any>, andOperator = true, doEmit = true): LocalDataSource {\n    if (conf && conf.length > 0) {\n      conf.forEach((fieldConf) => {\n        this.addFilter(fieldConf, andOperator, false);\n      });\n    } else {\n      this.filterConf = {\n        filters: [],\n        andOperator: true,\n      };\n    }\n    this.filterConf.andOperator = andOperator;\n    this.pagingConf['page'] = 1;\n\n    super.setFilter(conf, andOperator, doEmit);\n    return this;\n  }\n\n  addFilter(fieldConf: any, andOperator = true, doEmit: boolean = true): LocalDataSource {\n    if (!fieldConf['field'] || typeof fieldConf['search'] === 'undefined') {\n      throw new Error('Filter configuration object is not valid');\n    }\n\n    let found = false;\n    this.filterConf.filters.forEach((currentFieldConf: any, index: any) => {\n      if (currentFieldConf['field'] === fieldConf['field']) {\n        this.filterConf.filters[index] = fieldConf;\n        found = true;\n      }\n    });\n    if (!found) {\n      this.filterConf.filters.push(fieldConf);\n    }\n    this.filterConf.andOperator = andOperator;\n    super.addFilter(fieldConf, andOperator, doEmit);\n    return this;\n  }\n\n  setPaging(page: number, perPage: number, doEmit: boolean = true): LocalDataSource {\n    this.pagingConf['page'] = page;\n    this.pagingConf['perPage'] = perPage;\n\n    super.setPaging(page, perPage, doEmit);\n    return this;\n  }\n\n  setPage(page: number, doEmit: boolean = true): LocalDataSource {\n    this.pagingConf['page'] = page;\n    super.setPage(page, doEmit);\n    return this;\n  }\n\n  getSort(): any {\n    return this.sortConf;\n  }\n\n  getFilter(): any {\n    return this.filterConf;\n  }\n\n  getPaging(): any {\n    return this.pagingConf;\n  }\n\n  protected prepareData(data: Array<any>): Array<any> {\n    data = this.filter(data);\n    data = this.sort(data);\n    this.filteredAndSorted = data.slice(0);\n\n    return this.paginate(data);\n  }\n\n  protected sort(data: Array<any>): Array<any> {\n    if (this.sortConf) {\n      this.sortConf.forEach((fieldConf) => {\n        data = LocalSorter\n          .sort(data, fieldConf['field'], fieldConf['direction'], fieldConf['compare']);\n      });\n    }\n    return data;\n  }\n\n  // TODO: refactor?\n  protected filter(data: Array<any>): Array<any> {\n    if (this.filterConf.filters) {\n      if (this.filterConf.andOperator) {\n        this.filterConf.filters.forEach((fieldConf: any) => {\n          if (fieldConf['search'].length > 0) {\n            data = LocalFilter\n              .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']);\n          }\n        });\n      } else {\n        let mergedData: any = [];\n        this.filterConf.filters.forEach((fieldConf: any) => {\n          if (fieldConf['search'].length > 0) {\n            mergedData = mergedData.concat(LocalFilter\n              .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']));\n          }\n        });\n        // remove non unique items\n        data = mergedData.filter((elem: any, pos: any, arr: any) => {\n          return arr.indexOf(elem) === pos;\n        });\n      }\n    }\n    return data;\n  }\n\n  protected paginate(data: Array<any>): Array<any> {\n    if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n      data = LocalPager.paginate(data, this.pagingConf['page'], this.pagingConf['perPage']);\n    }\n    return data;\n  }\n}\n","import { Component, Input, Output, SimpleChange, EventEmitter, OnChanges, OnDestroy } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\n\nimport { Grid } from './lib/grid';\nimport { DataSource } from './lib/data-source/data-source';\nimport { Row } from './lib/data-set/row';\nimport { deepExtend, getPageForRowIndex } from './lib/helpers';\nimport { LocalDataSource } from './lib/data-source/local/local.data-source';\nimport { Ng2SmartTableSettings } from './lib/data-settings/data-settings';\n\n@Component({\n  selector: 'ng2-smart-table',\n  styleUrls: ['./ng2-smart-table.component.scss'],\n  templateUrl: './ng2-smart-table.component.html',\n})\nexport class Ng2SmartTableComponent implements OnChanges, OnDestroy {\n\n  @Input() source: any;\n  @Input() settings: Ng2SmartTableSettings | Object;\n\n  @Output() rowSelect = new EventEmitter<any>();\n  @Output() rowDeselect = new EventEmitter<any>();\n  @Output() userRowSelect = new EventEmitter<any>();\n  @Output() pageChange = new EventEmitter<any>();\n  @Output() delete = new EventEmitter<any>();\n  @Output() edit = new EventEmitter<any>();\n  @Output() editCancel = new EventEmitter<any>();\n  @Output() create = new EventEmitter<any>();\n  @Output() createCancel = new EventEmitter<any>();\n  @Output() custom = new EventEmitter<any>();\n  @Output() deleteConfirm = new EventEmitter<any>();\n  @Output() editConfirm = new EventEmitter<any>();\n  @Output() createConfirm = new EventEmitter<any>();  \n  @Output() rowHover: EventEmitter<any> = new EventEmitter<any>();\n\n  tableClass: string;\n  tableId: string;\n  perPageSelect: any;\n  isHideHeader: boolean;\n  isHideSubHeader: boolean;\n  isPagerDisplay: boolean;\n  rowClassFunction: Function;\n\n  grid: Grid;\n  defaultSettings: Object = {\n    mode: 'inline', // inline|external|click-to-edit\n    selectMode: 'single', // single|multi\n    /**\n     * Points to an element in all data\n     *\n     * when < 0 all lines must be deselected\n     */\n    selectedRowIndex: 0,\n    switchPageToSelectedRowPage: false,\n    hideHeader: false,\n    hideSubHeader: false,\n    actions: {\n      columnTitle: 'Actions',\n      add: true,\n      edit: true,\n      delete: true,\n      custom: [],\n      position: 'left', // left|right\n    },\n    filter: {\n      inputClass: '',\n    },\n    edit: {\n      inputClass: '',\n      editButtonContent: 'Edit',\n      saveButtonContent: 'Update',\n      cancelButtonContent: 'Cancel',\n      confirmSave: false,\n    },\n    add: {\n      inputClass: '',\n      addButtonContent: 'Add New',\n      createButtonContent: 'Create',\n      cancelButtonContent: 'Cancel',\n      confirmCreate: false,\n    },\n    delete: {\n      deleteButtonContent: 'Delete',\n      confirmDelete: false,\n    },\n    attr: {\n      id: '',\n      class: '',\n    },\n    noDataMessage: 'No data found',\n    columns: {},\n    pager: {\n      display: true,\n      page: 1,\n      perPage: 10,\n    },\n    rowClassFunction: () => '',\n  };\n\n  isAllSelected: boolean = false;\n\n  private onSelectRowSubscription: Subscription;\n  private onDeselectRowSubscription: Subscription;\n  private destroyed$: Subject<void> = new Subject<void>();\n\n  ngOnChanges(changes: { [propertyName: string]: SimpleChange }) {\n    if (this.grid) {\n      if (changes['settings']) {\n        this.grid.setSettings(this.prepareSettings());\n      }\n      if (changes['source']) {\n        this.source = this.prepareSource();\n        this.grid.setSource(this.source);\n      }\n    } else {\n      this.initGrid();\n    }\n    this.tableId = this.grid.getSetting('attr.id');\n    this.tableClass = this.grid.getSetting('attr.class');\n    this.isHideHeader = this.grid.getSetting('hideHeader');\n    this.isHideSubHeader = this.grid.getSetting('hideSubHeader');\n    this.isPagerDisplay = this.grid.getSetting('pager.display');\n    this.isPagerDisplay = this.grid.getSetting('pager.display');\n    this.perPageSelect = this.grid.getSetting('pager.perPageSelect');\n    this.rowClassFunction = this.grid.getSetting('rowClassFunction');\n  }\n\n  ngOnDestroy(): void {\n    this.destroyed$.next();\n  }\n\n  selectRow(index: number, switchPageToSelectedRowPage: boolean = this.grid.getSetting('switchPageToSelectedRowPage')): void {\n    if (!this.grid) {\n      return;\n    }\n    this.grid.settings.selectedRowIndex = index;\n    if (this.isIndexOutOfRange(index)) {\n      // we need to deselect all rows if we got an incorrect index\n      this.deselectAllRows();\n      return;\n    }\n\n    if (switchPageToSelectedRowPage) {\n      const source: DataSource = this.source;\n      const paging: { page: number, perPage: number } = source.getPaging();\n      const page: number = getPageForRowIndex(index, paging.perPage);\n      index = index % paging.perPage;\n      this.grid.settings.selectedRowIndex = index;\n\n      if (page !== paging.page) {\n        source.setPage(page);\n        return;\n      }\n\n    }\n\n    const row: Row = this.grid.getRows()[index];\n    if (row) {\n      this.onSelectRow(row);\n    } else {\n      // we need to deselect all rows if we got an incorrect index\n      this.deselectAllRows();\n    }\n  }\n\n  private deselectAllRows(): void {\n    this.grid.dataSet.deselectAll();\n    this.emitDeselectRow(null);\n  }\n\n  editRowSelect(row: Row) {\n    if (this.grid.getSetting('selectMode') === 'multi') {\n      this.onMultipleSelectRow(row);\n    } else {\n      this.onSelectRow(row);\n    }\n  }\n\n  onUserSelectRow(row: Row) {\n    if (this.grid.getSetting('selectMode') !== 'multi') {\n      this.grid.selectRow(row);\n      this.emitUserSelectRow(row);\n      this.emitSelectRow(row);\n    }\n  }\n\n  onRowHover(row: Row) {\n    this.rowHover.emit(row);\n  }\n\n  multipleSelectRow(row: Row) {\n    this.grid.multipleSelectRow(row);\n    this.emitUserSelectRow(row);\n    this.emitSelectRow(row);\n  }\n\n  onSelectAllRows($event: any) {\n    this.isAllSelected = !this.isAllSelected;\n    this.grid.selectAllRows(this.isAllSelected);\n\n    this.emitUserSelectRow(null);\n    this.emitSelectRow(null);\n  }\n\n  onSelectRow(row: Row) {\n    this.grid.selectRow(row);\n    this.emitSelectRow(row);\n  }\n\n  onMultipleSelectRow(row: Row) {\n    this.emitSelectRow(row);\n  }\n\n  initGrid() {\n    this.source = this.prepareSource();\n    this.grid = new Grid(this.source, this.prepareSettings());\n\n    this.subscribeToOnSelectRow();\n    this.subscribeToOnDeselectRow();\n  }\n\n  prepareSource(): DataSource {\n    if (this.source instanceof DataSource) {\n      return this.source;\n    } else if (this.source instanceof Array) {\n      return new LocalDataSource(this.source);\n    }\n\n    return new LocalDataSource();\n  }\n\n  prepareSettings(): Object {\n    return deepExtend({}, this.defaultSettings, this.settings);\n  }\n\n  changePage($event: any) {\n    this.resetAllSelector();\n    this.emitPageChange($event);\n  }\n\n  sort($event: any) {\n    this.resetAllSelector();\n  }\n\n  filter($event: any) {\n    this.resetAllSelector();\n  }\n\n  private resetAllSelector() {\n    this.isAllSelected = false;\n  }\n\n  private emitUserSelectRow(row: Row) {\n    const selectedRows = this.grid.getSelectedRows();\n\n    this.userRowSelect.emit({\n      data: row ? row.getData() : null,\n      isSelected: row ? row.getIsSelected() : null,\n      source: this.source,\n      selected: selectedRows && selectedRows.length ? selectedRows.map((r: Row) => r.getData()) : [],\n    });\n  }\n\n  private emitSelectRow(row: Row) {\n    const data = {\n      data: row ? row.getData() : null,\n      isSelected: row ? row.getIsSelected() : null,\n      source: this.source,\n    };\n    this.rowSelect.emit(data);\n    if (!row?.isSelected) {\n      this.rowDeselect.emit(data);\n    }\n  }\n\n  private emitDeselectRow(row: Row): void {\n    this.rowDeselect.emit({\n      data: row ? row.getData() : null,\n      isSelected: row ? row.getIsSelected() : null,\n      source: this.source,\n    });\n  }\n\n  private isIndexOutOfRange(index: number): boolean {\n    const dataAmount: number = this.source?.count();\n    return index < 0 || (typeof dataAmount === 'number' && index >= dataAmount);\n  }\n\n  private subscribeToOnSelectRow(): void {\n    if (this.onSelectRowSubscription) {\n      this.onSelectRowSubscription.unsubscribe();\n    }\n    this.onSelectRowSubscription = this.grid.onSelectRow()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((row) => {\n        this.emitSelectRow(row);\n      });\n  }\n\n  private subscribeToOnDeselectRow(): void {\n    if (this.onDeselectRowSubscription) {\n      this.onDeselectRowSubscription.unsubscribe();\n    }\n    this.onDeselectRowSubscription = this.grid.onDeselectRow()\n      .pipe(takeUntil(this.destroyed$))\n      .subscribe((row) => {\n        this.emitDeselectRow(row);\n      });\n  }\n\n  private emitPageChange($event: any) {\n    this.pageChange.emit($event);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { CellModule } from './components/cell/cell.module';\nimport { FilterModule } from './components/filter/filter.module';\nimport { PagerModule } from './components/pager/pager.module';\nimport { TBodyModule } from './components/tbody/tbody.module';\nimport { THeadModule } from './components/thead/thead.module';\n\nimport { Ng2SmartTableComponent } from './ng2-smart-table.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    CellModule,\n    FilterModule,\n    PagerModule,\n    TBodyModule,\n    THeadModule,\n  ],\n  declarations: [\n    Ng2SmartTableComponent,\n  ],\n  exports: [\n    Ng2SmartTableComponent,\n  ],\n})\nexport class Ng2SmartTableModule {\n}\n","export class ServerSourceConf {\n\n  protected static readonly SORT_FIELD_KEY = '_sort';\n  protected static readonly SORT_DIR_KEY = '_order';\n  protected static readonly PAGER_PAGE_KEY = '_page';\n  protected static readonly PAGER_LIMIT_KEY = '_limit';\n  protected static readonly FILTER_FIELD_KEY = '#field#_like';\n  protected static readonly TOTAL_KEY = 'x-total-count';\n  protected static readonly DATA_KEY = '';\n\n  endPoint: string;\n\n  sortFieldKey: string;\n  sortDirKey: string;\n  pagerPageKey: string;\n  pagerLimitKey: string;\n  filterFieldKey: string;\n  totalKey: string;\n  dataKey: string;\n\n  constructor(\n    { endPoint = '', sortFieldKey = '', sortDirKey = '',\n      pagerPageKey = '', pagerLimitKey = '', filterFieldKey = '', totalKey = '', dataKey = '' } = {}) {\n\n    this.endPoint = endPoint ? endPoint : '';\n\n    this.sortFieldKey = sortFieldKey ? sortFieldKey : ServerSourceConf.SORT_FIELD_KEY;\n    this.sortDirKey = sortDirKey ? sortDirKey : ServerSourceConf.SORT_DIR_KEY;\n    this.pagerPageKey = pagerPageKey ? pagerPageKey : ServerSourceConf.PAGER_PAGE_KEY;\n    this.pagerLimitKey = pagerLimitKey ? pagerLimitKey : ServerSourceConf.PAGER_LIMIT_KEY;\n    this.filterFieldKey = filterFieldKey ? filterFieldKey : ServerSourceConf.FILTER_FIELD_KEY;\n    this.totalKey = totalKey ? totalKey : ServerSourceConf.TOTAL_KEY;\n    this.dataKey = dataKey ? dataKey : ServerSourceConf.DATA_KEY;\n  }\n}\n","import { HttpClient, HttpParams } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\nimport { LocalDataSource } from '../local/local.data-source';\nimport { ServerSourceConf } from './server-source.conf';\nimport { getDeepFromObject } from '../../helpers';\n\nimport { map } from 'rxjs/operators';\n\nexport class ServerDataSource extends LocalDataSource {\n\n  protected conf: ServerSourceConf;\n\n  protected lastRequestCount: number = 0;\n\n  constructor(protected http: HttpClient, conf: ServerSourceConf | {} = {}) {\n    super();\n\n    this.conf = new ServerSourceConf(conf);\n\n    if (!this.conf.endPoint) {\n      throw new Error('At least endPoint must be specified as a configuration of the server data source.');\n    }\n  }\n\n  count(): number {\n    return this.lastRequestCount;\n  }\n\n  getElements(): Promise<any> {\n    return this.requestElements()\n      .pipe(map(res => {\n        this.lastRequestCount = this.extractTotalFromResponse(res);\n        this.data = this.extractDataFromResponse(res);\n\n        return this.data;\n      })).toPromise();\n  }\n\n  /**\n   * Extracts array of data from server response\n   * @param res\n   * @returns {any}\n   */\n  protected extractDataFromResponse(res: any): Array<any> {\n    const rawData = res.body;\n    const data = !!this.conf.dataKey ? getDeepFromObject(rawData, this.conf.dataKey, []) : rawData;\n\n    if (data instanceof Array) {\n      return data;\n    }\n\n    throw new Error(`Data must be an array.\n    Please check that data extracted from the server response by the key '${this.conf.dataKey}' exists and is array.`);\n  }\n\n  /**\n   * Extracts total rows count from the server response\n   * Looks for the count in the heders first, then in the response body\n   * @param res\n   * @returns {any}\n   */\n  protected extractTotalFromResponse(res: any): number {\n    if (res.headers.has(this.conf.totalKey)) {\n      return +res.headers.get(this.conf.totalKey);\n    } else {\n      const rawData = res.body;\n      return getDeepFromObject(rawData, this.conf.totalKey, 0);\n    }\n  }\n\n  protected requestElements(): Observable<any> {\n    let httpParams = this.createRequesParams();\n    return this.http.get(this.conf.endPoint, { params: httpParams, observe: 'response' });\n  }\n\n  protected createRequesParams(): HttpParams {\n    let httpParams = new HttpParams();\n\n    httpParams = this.addSortRequestParams(httpParams);\n    httpParams = this.addFilterRequestParams(httpParams);\n    return this.addPagerRequestParams(httpParams);\n  }\n\n  protected addSortRequestParams(httpParams: HttpParams): HttpParams {\n    if (this.sortConf) {\n      this.sortConf.forEach((fieldConf) => {\n        httpParams = httpParams.set(this.conf.sortFieldKey, fieldConf.field);\n        httpParams = httpParams.set(this.conf.sortDirKey, fieldConf.direction.toUpperCase());\n      });\n    }\n\n    return httpParams;\n  }\n\n  protected addFilterRequestParams(httpParams: HttpParams): HttpParams {\n\n    if (this.filterConf.filters) {\n      this.filterConf.filters.forEach((fieldConf: any) => {\n        if (fieldConf['search']) {\n          httpParams = httpParams.set(this.conf.filterFieldKey.replace('#field#', fieldConf['field']), fieldConf['search']);\n        }\n      });\n    }\n\n    return httpParams;\n  }\n\n  protected addPagerRequestParams(httpParams: HttpParams): HttpParams {\n\n    if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n      httpParams = httpParams.set(this.conf.pagerPageKey, this.pagingConf['page']);\n      httpParams = httpParams.set(this.conf.pagerLimitKey, this.pagingConf['perPage']);\n    }\n\n    return httpParams;\n  }\n}\n"]}